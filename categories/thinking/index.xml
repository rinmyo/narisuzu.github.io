<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>胡思亂想 on 鳴鈴</title><link>https://ming.ling.moe/categories/thinking/</link><description>Recent content in 胡思亂想 on 鳴鈴</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 05 Jul 2021 12:59:56 +0800</lastBuildDate><atom:link href="https://ming.ling.moe/categories/thinking/index.xml" rel="self" type="application/rss+xml"/><item><title>以OOP的視角看が和の</title><link>https://ming.ling.moe/posts/no-and-ga-under-oop-views/</link><pubDate>Mon, 05 Jul 2021 12:59:56 +0800</pubDate><guid>https://ming.ling.moe/posts/no-and-ga-under-oop-views/</guid><description>封裝是典型的 OOP 的特徵之一（另外兩個是繼承和多肽多態）
封裝 拿以下 Java Class 举例 (省略方法實現)
class Human { double name; // 名前 double weight; // 体重 double height; // 身長 //挨拶 Human helloTo( Human target ) { // do something return this; }; //寝ること Human sleep( Time time ) { // do something return this; }; }; 其中返回 this 是爲了方便鏈式調用。使用成員變量和方法如下
Human me, you; // omit some codes here ... // use member variables me.name; you.height; // use method me.</description></item><item><title>兩個人同時開一個門會怎麼樣？</title><link>https://ming.ling.moe/posts/what-if-two-different-people-open-the-door-simultaneously/</link><pubDate>Sat, 12 Jun 2021 11:02:02 +0800</pubDate><guid>https://ming.ling.moe/posts/what-if-two-different-people-open-the-door-simultaneously/</guid><description>破題 不，鳴鈴不是想討論一般情況下開門的問題，在《異世界食堂》動畫作品中，鳴鈴看到了一個彈幕：
「要是有兩個異世界人同時打開門會怎麼樣？」
在《異世界食堂》的世界觀中，每當禮拜六在異世界的各處就會出現通往「洋食のねこや」之門。開了這扇門就能進入 日本的「洋食のねこや」料理屋。那麼食堂只有一個，但傳送門有很多個，慾使彈幕中的問題有意義的話，更準確的表述應該是：如果有多個異世界人同時打開不同的門會怎樣？
怎樣？ 在全片中沒有出現過問題中的情況，也沒有解釋這種情況。當然作品中從沒發生過和概率爲零是兩個不同的概念。 那麼有什麼辦法可以解釋這個現象或者解決這個問題呢？首先定義一下什麼叫同時打開門，兩個開門事件在同時發生的概率爲 $0$ , 因爲一個時刻在數軸上是一個點，傳送門出現的時間是週六一天 $24$ 小時。那麼，我們不妨把一次從開門事件到關門事件的過程稱爲一個開放區間，兩個開放區間有重疊稱爲同時打開門。那麼問題就是，如何處理兩個不同的開放區間可能重疊的問題。
那麼矛盾在哪裏呢？在動畫畫面中可以看到，在從食堂朝向外面的畫面中，我們可以知道在食堂中是能直接看到外界的，同時也有從外向內的畫面。
炸肉餅二世的門外 炸蝦一世的門外 顯然地，不同的人開門，門外的景色是不同的。由此可知，開門過程是不能有阻塞的。
🎲概率 要解決這個問題，最簡單的就是讓兩個開放區間不可能重疊，即令異世界中所有的事物構成一個精密的系統，如波函數坍塌一般，當一個門被打開，則其他的門被打開的概率變爲 $0$，不是指門打不開，而是指在異世界中根本不可能有人去開其他門，通過某種魔法或者猶未可知的機理（畢竟傳送門就已經夠魔幻了）
🌊緩衝區 首先給出結論：使用任何形式的 channel，包括 std::sync::mpsc 和 chan 都是不行的。因爲真實世界中所要求的是絕對的同時。而使用 channel 時，channel 同時只能發送一個物件，其他的發送會被阻塞。因此是無法解決問題的。
那如果使用帶緩衝區的信道呢？當進入門後都先被傳送入一個佇列（可能是一片魔法空間）中，稱其爲 Buffer，然後遵循 FIFO 的過程，當門被關上時則將 Buffer 中下一位顧客傳入，而且因爲是異世界不需要考慮緩衝區大小的問題。這麼雖然可行，但是顯然不符合作品設定，因此也 PASS.
🔒互斥鎖 鳴鈴認爲最有意思也是最現實的就是使用互斥鎖（Mutex）了。顯然的，在動畫畫面中傳送門上也是存在門鎖的。那麼只需要作很小的設定就可以解決這個問題：當一個開門的上升沿（大概位於門把手被轉下去的時刻），互斥鎖會被上鎖，然後其他地方的傳送門就不能再次爲 Mutex 上鎖，從而即使壓下門把手也不能打開門，就如同門鎖被物理地鎖上了一樣。當門被關上後，Mutex 被解鎖，其他的門就可以再次打開了。
同時鳴鈴注意到了，在動畫中人餐後離開食堂關上門後，門就會消失掉。這裏可以設定爲門被析構的同時 Mutex 被解鎖，就像 std::sync::Mutex 一樣.
🔂引用計數 如果愛好燉牛肉的六柱之赤從別人的門走出來了，不就不妙了嗎？（從月球上的門走出來似乎沒什麼問題）
赤女王 那麼怎麼設計可以使顧客能夠從進入時的門走出呢？
我們可以設定當一名顧客進門時，會攜帶一個上下文 context （可以用魔法實現），其中包含了其所打開的門的引用 reference，從而在出門時食堂只需要讀取上下文中的傳送門引用就可以再次打開進入時的那扇門。
還有，在咖喱飯和炸蝦中可以看到，一個門是允許多個人進入的，那麼要怎麼實現才能讓由同一扇門進入的最後一人出門時，該處的門再消失呢。使用引用計數可以解決這個問題，異世界各處的門都有一個引用計數器，當顧客進門時會進行計數，每人進入就自增一，當計數器爲零時則門構析.
所有的內容都是鳴鈴突發奇想，請不要認真:) 另外，異世界的白色污染問題也值得討論</description></item></channel></rss>