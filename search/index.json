[{"content":"個人実績 全てのプロジェクトは Github で見られます。 本文では内容と主要な技術を紹介いたします。\n個人ブログ（このサイト） 自分のブログです。自分の発想を記述するために、高校生のころから、最新技術を使っていくつのブログを作りました.\nrepo\n主要な技術：\nHugo Markdown $\\KaTeX$ Github pages CI(Github Action) UROJ-rs 大学の卒業研究の作品で、Universal Railway Online judge という鉄道の電子連動装置（computer interlocking）のシミュレーターのバックエンドです。この作品は web を基づいてフロントエンドとバックエンド両方あるプロジェクトです。どちらも最新の技術を使ったものです。\nrepo\n主要な技術：\nRust: Mozilla によって開発する高効率化コンパイル式現代的なプログラミング言語である。バックエンドを開発するにはつかいました GraphQL: Facebook によって開発するフロントエンドとバックエンドを通信するフレームワークである PostgreSQL: データベースソフトウェアである Tokio: Rust async runtime library actix-web: rust web framwork. Dijkstra\u0026rsquo;s algorithm: グラフ理論のアルゴリズム UROJ-web 上記の UROJ-rs のフロントエンドです\nrepo\n主要な技術：\nReact.js: Facebook によって開発する有名なフロントエンドライブラリーである。フロントエンドで使いました GraphQL: Facebook によって開発するフロントエンドとバックエンドを通信するフレームワークである Two.js: ブラウザでベクトル画像描くライブラリー TypeScript: マイクロソフトによって開発する JavaScript よりいいプログラミング言語です Node.js: web server runtime これらは現代的なウェブ開発技術である、伝統的な HTML, CSS, JS に基づくものです。すなわち、HTML, CSS, JS　ができるには決まっています。\n卒業論文 上記の卒業研究の論文。$\\LaTeX$ できれいに作ったものです。\nrepo\npracstation-server Goで実現する鉄道の電子信号所のソフトウェアのサーバーサイドです\nrepo\n主要な技術：\nGo(golang): Google によって開発するプログラミング言語です gRPC: Google によって開発する　RPC　フレームワークです MongoDB: データベースです pracstation-client 上記の pracstation-server の GUI クライアントサイドです\nrepo\n主要な技術：\nJava(JDK 15) JavaFX 15(based on FXML) MongoDB Log4j2 Gson Lombok Gradle ctcs-transponder-message-parse 中国の鉄道の地上子のメッセージ(Balise message)を解析するプログラム\nrepo\n主な技術\nGo(golang) 2dgeometrylib Minecraft 向けのジオメトリライブラリー\nrepo\n主な技術\nJava(JDK 8) Maven Gitlab CI Github の中にあるけど、以上で言及しなかったプロジェクトは未完成の作品です。\n","date":"2022-05-11T19:02:55+09:00","permalink":"https://ming.ling.moe/posts/cv/","title":"個人実績"},{"content":"$$ \\gdef\\imi{\\mathrm{i}} $$\n序 其實複數運算的幾何意義和代數意義是十分割裂的. 以至於我們不得不通過證明二者的等價性才能確認他們具有相同的行爲. 然而在學校中學到的複數向來是從 $\\sqrt{-1}$ 等於幾開始的, 也是從此定義的.\n但在使用時, 卻常常使用其幾何意義，即模和幅角. 僅在計算加法時才勉爲其難的求下反三角函數以方便二部相加.\n但是從實數定義的經驗中可以看到. 對於幾個等價的命題, 只需定其中一個爲公理. 則其餘皆爲基本定理. 所以本文不以 $\\imi \\coloneqq \\sqrt{-1}$ 作爲虛數單位的定義. 而是以幾何直觀感受到的平面點集出發來定義複數.\nEuclid 二維空間 我們定義無理數的時候是使用 Dedekind 分割有理數域來完成的. 但 Dedekind 定理表示實數是完備的，因此必然不能再在一根充滿了有理數和無理數的數軸上做文章. 但是, 一根不行可以兩根. 而且很方便的是, 我們已經有了一種集合, 其每個元素是實二元組. 那就是 $\\R^2$. 高中我們就學過的平面向量, 再熟悉不過了.\n但我們說 $\\R^2$ 不是一個數域, 因爲其未定義封閉的乘法運算. 仔細想來 $\\R^2$ 上只有\n加法: $(x_1, y_1) + (x_2, y_2) = (x_1+x_2, y_1 + y_2)$ 數乘: $k(x, y) = (kx, ky)$ 內積: $(x_1, y_1)\\cdot (x_2, y_2) = x_1x_2 + y_1y_2$ 顯然易證, 加法運算封閉, 滿足交換和結合律. 且 $\\forall (x,y) \\in \\R^2$ , $\\exists$ 加法單位元 $(0,0)$ , $\\exists$ 加法逆元 $(-x,-y)$ , 那麼, 我們可以再定義一個乘法運算, 使該集合之能夠稱爲一個域. 可以嘗試定義乘法爲\n乘法: $(x_1,y_1)(x_2,y_2) = (x_1x_2-y_1y_2, x_1y_2+x_2y_1)$ 加上乘法定義後, $\\R^2$ 是否成域了呢? 不妨驗證一下. 因爲域僅僅對加法和乘法提出了要求, 所以縱使忽略內積和數乘運算也無礙「定義乘法的 $\\R^2$ 」其成爲一個域. 因此我們添加一個乘法運算, 去除數乘和內積運算. 將修飾過的這個平面點集叫做 $\\Complex$.\n在這樣的定義下，顯然乘法封閉. 且 $\\forall (x,y) \\in \\Complex$, 有\n$ (1,0)(x,y) = (x,y) $ $\\displaystyle \\left(\\frac{x}{x^2 + y^2}, -\\frac{y}{x^2+y^2}\\right)(x, y) = (1, 0)$ 則 $(1,0)$ 是乘法單位元. $\\displaystyle \\left(\\frac{x}{x^2 + y^2}, -\\frac{y}{x^2+y^2}\\right)$ 是乘法逆元. 而且乘法的交換律、結合律、分配率也並不難證. 因此 $\\Complex$ 是一個域.\n先不討論其性質, 我們可以注意到 $\\Complex$ 和 $\\R^2$ (2 維 Euclid 空間) 的元素在結構上是相似的. 最直觀的感受是這兩個集合都是一個平面點集. 但若想從 $\\R^2$ 上得到一個域. 定義乘法的方式並不只一種. 而且 $\\Complex$ 是最奇形怪狀的一種. 我們不妨假設另外一種乘法的定義方式:\n🐱乘法: $(x_1, y_1)(x_2, y_2) = (x_1x_2, y_1y_2)$ 🐱乘法顯然比我們前文那種又乘又加又減的乘法看起來要「自然合理」的多. 也不難看出, 🐱乘法同樣存在乘法單位: $(1,1)$ , 乘法逆元 $(x^{-1}, y^{-1})$ (這個乘法逆元看起來也比上面那個又是平方分數又是負號的形式簡單不少), 並且交換律和結合律也是顯然成立的. 對於分配率更不難驗證:\n$$ \\begin{aligned} \u0026amp;(x_1, y_1)[(x_2, y_2) + (x_3, y_3)] \\cr =\u0026amp; (x_1x_2+x_1x_3, y_1y_2+y_1y_3) \\cr =\u0026amp; (x_1,y_1)(x_2,y_2) + (x_1,y_1)(x_3,y_3) \\end{aligned} $$\n很明顯這種構造乘法的方式也能形成一個域, 這說明乘法的定義方法不唯一. 但 $\\Complex$ 的這種奇形怪狀的乘法有什麼特殊之處呢? 在我們探討之前不妨先把 $\\Complex$ 書成我們習慣的形式.\n定義: $1 = (1,0), \\imi = (0, 1)$, 則任意複數 $(a, b)$ 都可以寫成 $$(a, 0)+ (0 ,b) = a + b\\imi$$\n這裏也能看出 $\\R^2$ 的數乘是 $\\Complex$ 乘法的一個特例. 下文我們都將使用 $a + b\\imi$ 的形式表示複數, 以便和不能進行乘法運算的二維向量區別開來\n幾何意義 從上面的過程可知在點集和加法的行爲上, $\\Complex$ 和 $\\R^2$ 是一樣的, 不如說在我們定義 $\\Complex$ 的思路下, 名爲「複平面」的二維平面點集和平行四邊形定則是完全繼承自 $\\R^2$ 的. 因爲在學習二維向量的時候，集合是平面點集、加法是平行四邊形定則、數乘是長度倍增、內積是投影長度. 一切運算都有直觀的幾何意義, 所以在討論與之相似的 $\\Complex$ 時也遵從相似的思路. 我們定義的乘法究竟有什麼奇妙深刻的意義, 縱使其代數式長的像奇形種一樣也依然不捨棄他.\n高中時我們學過極座標. 不妨設一點 $(x, y)$\n前文有例驗證, 使平面點集成域的乘法不止一種定義方式. 那麼隨意選擇一種方式都有其對應的幾何意義, 不過 $\\Complex$ 的乘法是旋轉罷了. 這麼看來我們並沒有動機去選擇 $\\Complex$ 中的乘法定義, 至少在定義時我們不知道這種定義有什麼具體現實的意義. 鳴鈴不禁考慮, 雖然我們已經知道了 $\\Complex$ 中乘法有着十分重要的現實意義, 那麼可否直接從現實需求的考慮出發，即對平面向量的旋轉作爲一種工具, 從而推導出一套和 $\\Complex$ 等價的結構和運算來? 事實上可以, 旋轉是線性代數中很常見的一種線性變換. 我們可以嘗試從這裏着手\u0026hellip;\n逆推 在實數軸上, 一個動點可以進行兩種運動平移 $x \\to x + \\Delta x$ 與倍增 $ x \\to kx $. 很自然的對於平面一點也有平移 $(x,y) \\to (x + \\Delta x, y+ \\Delta y)$, 但物理經驗告訴我們, 轉動也是平面動點的一種運動方式. 我們能否找到一個變換, 使之可以將一個點轉向 $\\theta$ ? 線性代數告訴我們確實可以. 設\n$$ \\boldsymbol{A} = \\begin{bmatrix} \\cos \\theta \u0026amp; -\\sin\\theta \\cr \\sin\\theta \u0026amp; \\cos\\theta \\end{bmatrix} $$\n則 $\\boldsymbol{v_1} = \\boldsymbol{Av}$ 表示 $\\boldsymbol{v} = (x, y)$ 逆時針旋轉 $\\theta$ 得到 $\\boldsymbol{v_1} = (x_1, y_1)$ . 其實 $\\theta$ 可以用任意向量來表示, 設對於向量 $\\boldsymbol{v_0} = (x_0, y_0)$ 有 $\\displaystyle \\frac{y_0}{x_0} = \\tan\\theta$. 則\n$$ \\boldsymbol{A} = \\frac{1}{\\sqrt{x_0^2 +y_0^2}} \\begin{bmatrix} x_0 \u0026amp; -y_0 \\cr y_0 \u0026amp; x_0 \\end{bmatrix} $$\n那麼對於 $\\boldsymbol{v_2} = \\boldsymbol{Bv}$ , 其中\n$$ \\boldsymbol{B} = \\Vert \\boldsymbol{v_0}\\Vert \\boldsymbol{A} = \\begin{bmatrix} x_0 \u0026amp; -y_0 \\cr y_0 \u0026amp; x_0 \\end{bmatrix} $$\n則表示 $\\boldsymbol{v_0}$ 在旋轉了 $\\arg(\\boldsymbol{v_0})$ 外還增了 $\\Vert \\boldsymbol{v_0}\\Vert $ 倍. 而複數的乘法實際上就是這個過程.\n如果我們將前文的複數定義作爲公理, 則很容易證明對於每一個 $\\boldsymbol{B}$ , $\\exists$唯一對應的向量 $\\boldsymbol{v_0} = (x_0, y_0)$ , 從而使 $\\forall \\boldsymbol{v} = (x,y) \\in \\R^2$ 有:\n$$ \\boldsymbol{Bv} = (x_0 + \\imi y_0)(x + \\imi y)$$\n其中等號左邊表示矩陣乘法，右邊表示之前定義的複數乘法. 反之如果以矩陣來定義複數及其運算, 則前文所述的各種性質也容易證明.\n使用線性變換的視角對於乘法的幾何意義很直觀, 如果 $y_0 = 0$ 則 $\\boldsymbol{v_0}$ 在 $x$ 軸(實軸)上, 等於旋轉 $0$ 或 $\\pi$ (具體數值看 $x_0$ 的正負) 後倍增 $\\Vert \\boldsymbol{v_0}\\Vert = |x_0|$ . 這其實等價於直接倍增 $x_0$ . 同時在形式上 $\\boldsymbol{B}$ 可以寫成\n$$ \\boldsymbol{B} = \\begin{bmatrix} x_0 \u0026amp; 0 \\cr 0 \u0026amp; x_0 \\end{bmatrix} = x_0\\boldsymbol{I} $$\n其中, $\\boldsymbol{I}$ 是二階單位陣. 由簡單的線性代數芝士可知.\n$$ \\boldsymbol{Bv} = x_0\\boldsymbol{I}\\begin{bmatrix}x\\cr y\\end{bmatrix} = x_0\\begin{bmatrix}x\\cr y\\end{bmatrix} $$\n從數乘的幾何意義知其爲倍增 $x_0$ . 和前面的分析完全相同. 這說明 $\\R^2$ 中的數乘運算其實是 $\\Complex$ 中乘法運算的一種特殊情況. 再令 $\\boldsymbol{\\vec{v}} = (x, 0)$. 則不難想見, 雖然變量還是二維的, 但所有的點都在 $x$ 軸上. 那麼實數的乘法其實也是一種特殊情況. 即小節最開始的實數乘法運算的倍增意義. 於是我們也可以從矩陣變換來定義複數. 對於矩陣 $\\boldsymbol{A}$ 對應的複數 $\\cos\\theta + \\imi\\sin\\theta$ , 正是歐拉公式右邊的形式.\n總結 從高中到大學，複數域都是先定義 $\\imi$ 的. 並且 $\\imi$ 從解決了數學危機的大功臣一下變成了複振幅. 這種過度顯得很不自然. 本文提供了兩類不同的思路去發現並定義複數並推出其一切性質. 但應該注意的是本文中的兩種思路. 因爲合法的乘法規則不止一條, 並且任舉一條合法的乘法規則時都不知該規則會帶來怎樣的座標變換. 從另一條思路, 座標變換不止一種, 所以從任意變換出發都無法立即判別其是否滿足乘法規則的定律. 但合法的變換矩陣一定只由兩個實數構成, 即可以和平面點集中的點一一對應. 不然不滿足乘法的定義.\n那麼作爲一名工科生, 我們最早使用到複數是在電路中描述正弦量, 天然是爲了尋找某種結構以應用旋轉而發的. 所以從旋轉變換的角度出發來構造複數便顯得尤爲自然, 而解決 $\\sqrt{-1}$ 的定義不過是這條路上的副產物而已.\n","date":"2021-09-13T20:57:55+08:00","permalink":"https://ming.ling.moe/posts/complex-number/","title":"如何構造複數域"},{"content":"序 本文是爲了應付應對 TOEIC® 考試和日常應用而準備的. 鳴鈴在用的單詞書是新東方的《3500 词搞定托业考试》。不得不說的是此書的分類真的超亂，基本沒有參考意義。\n因爲書中有些詞是鳴鈴本就會的，所以本頁只記錄生詞，即單詞釋義中有任何一項不知者。對於學會的生詞會進行標記。而本頁面中會使用到一些標記，在此列出:\n標記 含義 OM 本義 EM 引申 C 可數名詞 U 不可數名詞 T 他動詞 I 自動詞 11 Aug abide /əˈbaɪd/ OM to live or stay somewhere, wait, wait for\nabide with: live or stay with sb. EM endure, sustain, stay firm under\nabide by: + rules (不情願地, 不得不)遵守規則 EM tolerate, bear, put up with\ncan\u0026rsquo;t abide sb/sth: cannot bear sb/sth 與 「不共戴天」 的用法類似. 形容難以忍受，以至於無法和 sb/sth 待在一起. 可以忍受即可以和 sb/sth 在一起. 想象垃圾或者粉蛆在身邊. 引申義多帶貶意，即不情願的感覺.\nfarewell /fɛəˈwɛl/ old-fashioned or formal\nGOODBYE abstain /əbˈsteɪn/ NOT DO: to not do something, especially something enjoyable that you think might be bad.\n典型的：奶頭樂，雖然開心但是有害. 不去做這種事情就叫 abstain.\nNOT VOTE: to decide not to use your vote.\n大概可視爲上種含義的外延. 如果細究定義的話, 權利令人開心但是有害(?), 放棄投票權的行爲就類似「可以選, 但因爲利益考量所以不選」的感覺.\n~ from sth.\ninaugural /ɪˈnɔː.ɡjə.rəl/ An inaugural speech is the first speech someone gives when starting an important new job.\ne.g. ~ address/lecture/speech\nAn inaugural event is the first in a series of planned events.\ne.g. ~ meeting/event/ceremony/celebration\naccustom /ə.ˈkʌs.təm/ to make someone familiar with new conditions.\nOften said about yourself. abundant /əˈbʌn.dənt/ more than enough\n鳴: 書上的漢譯有誤，按照上述定義應爲：「綽綽然」「有餘裕(的)」，「餘裕」的定義爲：充裕而有餘. 「綽綽」的定義爲：寬而有餘之貌. 其共通點在於多餘所需之量. 而非豐富，大量之含義. mattress /ˈmætɹɪs/ a mattress ornament /ˈɔː.nə.mənt/ C an object that is beautiful rather than useful.\n但和「華而不實」有異, ~ 不含貶義. 可譯爲：飾品，裝飾物.\nU decoration that is added to increase the beauty of something.\n可譯爲：裝飾(不可數)\nT to add decoration to something\nadmit /ədˈmɪt/ T I ACCEPT to agree that something is true, especially unwillingly.\n尤其不情願. something 指命題.\nT ALLOW IN to allow someone to enter a place.\nconform /kənˈfɔːm/ I to behave in the way that most other people behave.\nto behave according to the usual standards of behaviour that are expected by a group or society.\nor to operate according to a rule.\nT ~ to/with: to obey a rule or reach the necessary stated standard manage /ˈmænɪdʒ/ SUCCEED\nmanage to V == succeed in Ving.\nmanage N(動作性名詞) == succeed in N.\nto be able to attend or do something at a particular time. ~ + 有時間屬性的名詞.\n","date":"2021-08-11T22:09:03+08:00","image":"https://ming.ling.moe/posts/en-vocabulary/cover_hu3d03a01dcc18bc5be0e67db3d8d209a6_1173752_120x120_fill_q75_box_smart1.jpg","permalink":"https://ming.ling.moe/posts/en-vocabulary/","title":"背單詞嘍"},{"content":"$$ \\gdef\\dif{\\mathop{}\\!\\mathrm{d}} $$\n序 解微分方程，甚至於說解方程，是方法大於意義的一種過程. 從高斯消元法開始，我們都發現，解方程的學習就是在尋求符合某種特定模式（Pattern）的方程的具體解法. 因此對於之前的各種方程的分類，其一方面表現了一定現實意義的象徵，同時對我們而言，也是選取何種方法去解它的一種信號. 這種同類的方程是共用某種「模型」的抽象，用 CS 的話說，就是方程這種數學抽象，允許我們在各種不同的場景中復用(Reuse)這些前人總結的結論.\n很顯然的就是在古典控制理論中，一階電路、彈簧阻尼器系統這兩個完全不同的情境都可以抽象成模式相同的一階微分方程，而如果我們學會了一階微分方程，就能同時解決這兩種情境下的問題. 而這種解決方程的方法，應該是不含有任何現實意義的，即方程中的任何參量於變量，都是沒有任何含義的. 只有在具體的環境下，量才能有具體的意義. 這就是鳴鈴之前說的解方程，是方法大於意義的一種過程. 在方程約束的數學模型中，解決問題的流程大概可以分爲兩步，列方程（建模）和解方程. 而在進入後一個步驟後，我們的焦點就不應該停留在現實意義上了. 直到得到解（解集、通解或特解），變量才又重新有了直觀的意義.\n在理工科中，抽象化的概念總是讓人難以理解. 但抽象帶來最大的好處，就是增加了過程或結構的通用性. 就像我們能把電路、交通、人物關係都能抽象成圖，從而可以在不同的領域中復用圖論中的結論. 因此不僅是方程, 我們可以將結論也抽象一下, 對於任何事物: 抽象程度愈高, 具體意義愈少.\n對於鳴鈴個人體驗而言，在同等的抽象程度下，學習方法性的知識比學習概念性的知識要困難的多. 記憶方法性的知識在於練習（做題）.\n而本文之目的，並非在於教條化的記憶或背誦這些方法. 如果不能知其因何可行, 總是令人覺得不安. 單純的將解法和知識當作教條, 這纔是我所認爲的「做題家」, 而我想要的知識是沒有教條的, 除了基本公理是不證自明之外.\n一階微分方程 一階微分方程可以寫成兩種等價的形式 $$\\frac{\\dif y}{\\dif x} = f(x, y)$$ 或 $$P(x,y)\\dif x + Q(x,y)\\dif y = 0$$ 只要令 $f(x,y) = -\\displaystyle\\frac{P(x,y)}{Q(x,y)}$, 就可證明二者等價.\n下面一階微分方程的解法, 都是基於這兩種形式之一的. 但單就「一階微分方程」而言是沒有什麼足夠的特徵或稱性質讓我們利用以解方程的. 方程之所以有法可解, 一定是他擁有某些具體的可利用的性質, 而這些性質往往來自於方程的形式或方程中所含函數的性質. 在意識中建立某種模式到某種方法的映射, 便可作爲被我們解方程的規律.\n一階可分離變量 有些微分方程，他們的變量是可以分離至等號兩邊的. 形如 $$\\frac{\\dif y}{\\dif x} = g(x)h(y)$$ 對於這樣的微分方程，其解法應遵從以下兩個步驟\n變量分離 積分 由上式不難得出幾種常見的亞型.\n可分離 𝑥 形如: $$\\frac{\\dif y}{\\dif x} = f(x)$$\n分離變量 $$\\dif y = f(x) \\dif x$$ 積分 $$y = \\int \\dif y = \\int f(x) \\dif x + C$$ 對於高階情況, 形如 $$\\frac{\\dif^n y}{\\dif x^n} = f(x)$$ 其變量依舊是可分離的, 上式可化爲: $$\\dif\\frac{\\dif^{n-1} y}{\\dif x^{n-1}} = f(x)\\dif x$$ 從而 $$\\frac{\\dif^{n-1} y}{\\dif x^{n-1}} = \\int f(x) \\dif x + C_1$$ 如此以來也就有: $$\\frac{\\dif^{n-2} y}{\\dif x^{n-2}} = \\int\\left[\\int f(x) \\dif x\\right]\\dif x+ C_1x + C_2$$ 如此往復最終可以將等號左邊的 $\\dif x$ 全部移到右邊. 從而可以看出，對於高階情況也是變量可分離的.\n可分離 𝑦 形如: $$\\frac{\\dif y}{\\dif x} = f(y)$$ 這種方程因爲可以描述自治系統，因此稱爲自治方程.\n分離變量 $$\\dif x = \\frac{1}{f(y)} \\dif y$$ 積分 $$x = \\int \\dif x = \\int \\frac{1}{f(y)} \\dif y$$ 和可分離 $x$ 不同, 於此種模式下, 若等式左邊是高階導數, 則不可分離變量. 爲什麼不行呢？自己試試不就知道了嗎.\n可分離 𝑥 同 𝑦 形如: $$P_1(x)Q_1(y)\\dif y + P_2(x)Q_2(y)\\dif x = 0$$\n分離變量: 等式兩邊同時除以 $P_1(x)Q_2(y)$. $$\\frac{Q_1(y)}{Q_2(y)} \\dif y = -\\frac{P_2(x)}{P_1(x)} \\dif x$$ 積分 $$\\int\\frac{Q_1(y)}{Q_2(y)} \\dif y = -\\int\\frac{P_2(x)}{P_1(x)} \\dif x$$ 一階不可分離變量 對於另一些微分方程，我們不能直接把他們的變量分離開. 但也不是沒有辦法, 偉大的數學家們已經爲我們照亮迷途啦! 還不快感恩戴德的記下來?!\n一階齊次微分方程 形如: $$M(x,y)\\dif x + N(x,y)\\dif y = 0 \\tag{1}$$ 其中 $M$ 和 $N$ 是同次的二元齊次函數, 這類微分方程是可以化爲可分離變量的微分方程的, 怎麼分離呢, 是需要一點魔法來先處理一下原方程. $$\\frac{\\dif y}{\\dif x} = - \\frac{M(x,y)}{N(x,y)}$$ 然後有 $$ \\frac{\\dif y}{\\dif x} = - \\frac{M\\left(1,\\displaystyle\\frac{y}{x}\\right)}{N\\left(1,\\displaystyle\\frac{y}{x}\\right)} $$ 但是, 看起來有點不對勁, 爲什麼自變量能這麼變啊? 如果沒有忘記 $M$, $N$ 皆爲齊次函數的話, 那麼二元齊次函數的定義爲: $$f(ax, ay) = a^kf(x,y)$$ 其中, $k$ 爲整數. 按此定義, 就有 $$ \\frac{M(x,y)}{N(x,y)} = \\frac{\\displaystyle x^{-k}M\\left(\\frac{x}{x},\\frac{y}{x}\\right)}{\\displaystyle x^{-k}N\\left(\\frac{x}{x},\\frac{y}{x}\\right)} = \\frac{M\\left(1,\\displaystyle\\frac{y}{x}\\right)}{N\\left(1,\\displaystyle\\frac{y}{x}\\right)} $$ 嗯, 好吧, 但是等號右邊依舊有 $y$ 呀. 怎樣才能分離呢? 使用換元法, 令 $y=u(x)x$ $$\\frac{\\dif y}{\\dif x} = -\\frac{M(1, u)}{N(1, u)} \\tag{2}$$ 而 $\\displaystyle\\frac{\\dif y}{\\dif x} = \\frac{\\dif u}{\\dif x}x + u(x)$ 代入有 $$\\frac{\\dif u}{\\dif x} x + u = - \\frac{M(1,u)}{N(1,u)}$$ 然後稍作變換, 便可分離變量了. $$\\frac{1}{\\displaystyle\\frac{M(1,u)}{N(1,u)} + u} \\dif u = -\\frac{1}{x}\\dif x$$\n好啦, 看起來好複雜的說. 那麼核心思路是什麼呢? 事實上, 我們並沒有分離 $x$ 和 $y$, 我們分離的其實是 $x$ 和 $\\displaystyle\\frac{y}{x}$. 而我們之所以可以透過換元實現這一點, 是得益於 $M$ 和 $N$ 是同次的齊次函數.\n在教科書上, 對於一階齊次微分方程的描述是這樣的1\n如果一階微分方程可化成 $$\\frac{\\dif y}{\\dif x} = \\varphi\\left(\\frac{y}{x}\\right) \\tag{3}$$ 的形式, 那麼就稱這方程爲其次方程.\n首先來說明一下這兩種定義的等價性, 而後再來說說兩種定義的優缺點. 對於式 (2) , 我們令 $$\\varphi(u) \\coloneqq -\\frac{M(1,u)}{N(1,u)}$$ 而前面我們已經知道 $\\displaystyle u=\\frac{y}{x}$, 因此式 (2) 等價於式 (3).\n那麼鳴鈴爲什麼不採用教科書上的定義呢？單從式 (3) 的形式, 我們是無法得知這類方程爲什麼叫「齊次」的. 而最致命的, 在後面還會學到「線性齊次微分方程」但這兩個「齊次」所指並不相同. 本節的齊次指的是「齊次函數」而後文的齊次指的是「齊次方程」.所以搞明白「齊次函數」在解方程中作用爲何就尤爲重要.\n那麼教科書上的定義方式有什麼優點呢? 優點就是簡單, 方便學生在稀裏糊塗的情況下把這種方法當作教條一樣背下來解題. 不用去記憶多餘的「齊次函數」什麼的定義. 因爲在解題過程中真正的關鍵是換元, 而理解齊次函數的性質是沒有任何意義的. 所以爲了保護做題家們珍貴的神經元和膠質細胞. 沒有必要記憶這些對於做題沒有意義的知識 )\n一階可化爲齊次的方程 同濟高數提到了這樣一種特殊形式的方程，在式 (1) 中: $$ \\begin{gathered} M \\coloneqq a_1x+b_1y+c_1 \\cr N \\coloneqq a_2x+b_2y+c_2 \\end{gathered} $$ 時，$M(\\alpha x, \\alpha y) = \\alpha (a_1x + b_1y) + c_1$, 不爲齊次方程, $N$ 同理. 然而我們依然可以透過換元來適用齊次方程的解法.\n我們可以想辦法構造 $$ \\begin{gathered} M = a\u0026rsquo;_1x\u0026rsquo;+b\u0026rsquo;_1y\u0026rsquo; \\cr N = a\u0026rsquo;_2x\u0026rsquo;+b\u0026rsquo;_2y' \\end{gathered} $$ 如此雖然$M(x, y)$ 和 $N(x, y)$ 並非齊次函數，但 $M(x\u0026rsquo;, y\u0026rsquo;)$ 和 $N(x\u0026rsquo;, y\u0026rsquo;)$ 是齊次函數. 而我們只需要求出 $x$ 和 $x\u0026rsquo;$, $y$ 和 $y\u0026rsquo;$ 之間的關係, 便可應用一階齊次方程的解法.\n這其實也是換元法最大且唯一的思路，使用換元法可以將一種未知解法的「模式」轉換爲一種已知的「模式」. 而這種思想其實滲透應用於各個角落. 譬如某些物理量的複量2，其作用便是爲了利用歐拉公式用指數運算來簡化三角函數運算.\n小結 在此之前所提及的種種微分方程，以及之後提到的微分方程, 其核心思想就是絞盡腦汁把方程化成可分離變量的形式. 比如一階可化爲齊次的方程先換元化爲齊次方程，齊次方程再利用換元法得到可分離變量的微分方程. 因此解方程的圖景是很明晰的, 各種不同形式的方程解法的核心就在於如何分離變量, 而換元則是很重要的一種方法.\n線性微分方程 前面提到，這裏的線性是指「線性方程」的線性. 那麼什麼叫線性方程呢? 滿足線性的方程叫做線性方程, 滿足線性的方程組叫做線性方程組. 但這兩個線性又不是同一個線性的定義.. @_@ 什麼什麼, 好暈呀. 這裏直接採用 線性關係中的定義:\n如果稱一個数学函數 $L(x)$ 為線性的，可以是指：\n定义 1： $L(x)$ 是個只擁有一個變數的一階多項式函數，即是可以表示為 $ L(x)=kx+b $ 的形式（其中 $k,b$ 為常数）. 定义 2： $L(x)$ 具有以下兩個性質： 可加性: $L(x+t) = L(x)+L(t)$ 一次齊次性: $L(mx) = mL(x)$ 顯然線性方程組之「線性」指的是定義 1. 而這種定義是流於形式的, 是不一定滿足可和和一階齊次性的. 或者說, 若將線性方程的自由項置於等號右邊, 則等號左邊方爲定義 1 下的線性函數. (尋常所見的線性方程組俱爲此形式 )\n其實從名字也能看出，微分的線性性質和線性微分方程的線性是不同的. 因爲線性的定義2要求滿足「齊次性」，而又存在「線性非齊次微分方程」, 如果這種方程的「線性」和要求齊次性的「線性」是同一定義, 則自相矛盾. 而鳴鈴就是從這裏發現不對勁的地方的.\n雖然本文大概和定義 2 無關, 但鳴鈴還是想討論一下 在線性代數中有對於這種性質是另一種表述. 對於函數 $y = f(\\bm{x}), \\bm{x} \\in \\R^n$. 設集合 $S : \\{(x_1 \\cdots x_n, y) \\in \\R^{n+1} | y = f(\\bm{x})\\} $, 若 $S$ 對數乘和加法封閉. 則 $$ \\begin{gathered} (\\bm{x}_1 + \\bm{x}_2 , y_1 + y_2) \\in S \\cr k\\bm{x}_1 \\in S \\end{gathered} $$ 和和數乘都屬於解集, 則說明其都滿足方程. 不難證明, 這等價於 $$ \\begin{gathered} f(\\bm{x}_1 + \\bm{x}_2) = f(\\bm{x}_1) + f(\\bm{x}_2)\\cr f(k\\bm{x}_1) = kf(\\bm{x}_1) \\end{gathered} $$ 也就是說, 這時的函數 $f(\\bm{x})$ 是定義 2 下的線性函數. 這說明線性函數約束了所有變量存在於一個向量空間中. 你問鳴鈴這有什麼用？ 當然沒用啦.\n在線性微分方程領域. 因其線性指的是定義 1 , 但如果將常數項移動到等號右邊, 等號左邊的函數(變換)便是線性的, 故對於形如 $$ y^{(n)} + a_1(x)y^{(n-1)} + \\cdots +a_{n-1}(x)y\u0026rsquo; + a_n(x)y = b(x) \\tag{4} $$ 的方程, 有 $$ \\begin{gathered} \u0026amp;(y_1 + y_2)^{(n)} + a_1(x)(y_1 + y_2)^{(n-1)} + \\cdots +a_{n-1}(x)(y_1+y_2)\u0026rsquo; + a_n(x)(y_1+y_2) = b_1(x) + b_2(x) \\cr \u0026amp;(ky)^{(n)} + a_1(x)(ky)^{(n-1)} + \\cdots +a_{n-1}(x)(ky)\u0026rsquo; + a_n(x)(ky) = kb(x) \\end{gathered} $$ 因而稱其爲 $n$ 階線性微分方程. 細究起來，不難發現其線性特徵其實是來自於兩方面，一是微分算子的線性. 即 $$ \\begin{gathered} \u0026amp;(f+g)\u0026rsquo;(x) = f\u0026rsquo;(x) + g\u0026rsquo;(x) \\cr \u0026amp;(kf)\u0026rsquo;(x) = kf\u0026rsquo;(x) \\end{gathered} $$ 而微分算子的線性實際上是來自於向量空間中定義的加法和數乘運算, 從導數的極限定義不難證明 （讀者自證不難） 小貼士 $$ (f+g)\u0026rsquo;(x_0) = \\lim_{x\\to x_0} \\frac{(f+g)(x) - (f+g)(x_0)}{x - x_0} $$ 如果 $C^1[a,b]$ 不是向量空間則不存在加法, 則不存在 $(f+g)\u0026rsquo;(x)$\n好啦好啦，看起來扯太遠了 (ﾉ≧ڡ≦).\n線性微分方程解的分析 對於線性微分方程的解, 我們總能得出一些通用的結論. 因爲懶擔心諸位的熒幕寬度與流量, 就先拿二階舉例, 這裏就直接引用同濟版高數.\n對於方程 $$y\u0026rsquo;\u0026rsquo; + P(x)y\u0026rsquo; +Q(x)y = 0$$ 若函數 $y_1$ 和 $y_2$ 是方程的兩個解 那麼 $$y = c_1y_1(x) + c_2y_2(x)$$ 也是方程的解. $c_1$, $c_2$ 是任意常數.\n證明： 設方程解集爲 $S$, 由題可知 $S$ 是 $C^2[a, b]$ 的子空間 (題目中出現了二階導數，所以 $y$ 必然二階可導). 因此 $S$ 封閉, 得證.\n一階線性微分方程 一階線性微分方程係將 (4) 式中 $n$ 取 $1$ 得到的方程: $$y\u0026rsquo; + P(x)y = Q(x)$$ 前面說了那麼一大堆，一定能很方便的解方程吧！對吧對吧！那麼要怎麼解呢？ 唔.. 還是得用常數變易法.\n當 $Q(x) = 0$ 時, 方程係齊次的, 而且顯然是可分離變量的. 這裏就不再多言. 而非齊次情況下, 同濟課本上的常數變易法只給了方法卻沒有思路. 所以鳴鈴傾向於讀托馬斯微積分上的方法.\n《高等数学第七版上册》同济大学数学系编 ISBN 978-7-04-039663-8\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n電路理論中的相量、波動中的複振幅等\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2021-07-07T22:07:12+08:00","image":"https://ming.ling.moe/posts/all-about-ode/cover_hu40187953f5b88c41521b0a24ee9dc606_226635_120x120_fill_q75_box_smart1.jpg","permalink":"https://ming.ling.moe/posts/all-about-ode/","title":"常微分方程與無能的我"},{"content":"封裝是典型的 OOP 的特徵之一（另外兩個是繼承和多肽多態）\n封裝 拿以下 Java Class 举例 (省略方法實現)\nclass Human { double name; // 名前 double weight; // 体重 double height; // 身長 //挨拶 Human helloTo( Human target ) { // do something return this; }; //寝ること Human sleep( Time time ) { // do something return this; }; }; 其中返回 this 是爲了方便鏈式調用。使用成員變量和方法如下\nHuman me, you; // omit some codes here ... // use member variables me.name; you.height; // use method me.helloTo(you); me.sleep(); // link me.helloTo(you).sleep(); 到此爲止在任何語言任何講述 OOP 的教學中都存在於此類似的例子。那麼對於封裝的思想就是：\n把一些擁有共同數據和行爲的結構抽象爲「類」。但這個思想其實就來自於生活之中，就像前例一樣。人擁有名字、身高、體重等數據，也擁有打招呼或睡覺等行爲。既然來自於生活那麼必然有相應的自然語言去描述。\n這便是本文的主題，以 OOP 的角度來看助詞「の」和「が」。\n日文 在日文中，如何描述所有關係呢？這個很簡單了，沒有學過日文的人都知道，用「の」接續所有者和所有物。那麼前例從翻譯成日文就是\n私の名前 あなたの身長 如果把相應的實詞直譯的話就是\nmeのname youのheight 在日文中，修飾主語（動作者）的助詞是「が」，把前例翻譯成日文就是（實詞直譯，只留助詞）\nmeがyouにhelloする meがsleepする meがyouにhelloしてsleepする 這樣是不是就能看出の和が在形式上存在某種一致性？正如在動詞接續授受動詞的行爲一文中類比過的授受動詞在被動詞（從句）和名詞接續的現象，還有在定語從句中の和が可以互換等現象來看：以某個詞爲中心，其發出的動作和其所有的物品，在某種程度上的語言邏輯是類似的。更形式化的說，の 用來接續名詞，而 が 用來接續動詞。將 の 和 が 看作是同級或對偶的存在比較好，而 を，で，に修飾的成分看作是修飾動詞的（即參數，只是存在是否 Nullable 的區別）。在 OOP 中不難發現更多相似之處。\n對於て形中斷，其實和鏈狀調用蛮相似的，那麼與丁寧/辭書形結尾類似的就是「;」了。综合起来舉個複雜的例子。\n例 私があなたの醤油をつけて彼の餃子を食べる\nme.dip(you.joySource).eat(he.dumpling); 當然了，計算機語言是由人類精心設計過的，主要是給編譯器看的。而自然語言是經歷上千年的變化而來的。拿二者比較本身就不是很嚴謹的事，所以這只是鳴鈴箇人的一點小想法。其實鳴鈴注意到の和が之間存在某種相似性很早之前就有了，當初學到の可以替代從句中的が時就隱隱覺得奇怪，而後仔細對比了の和が在授受動詞接續名詞和從句時的行爲寫成了動詞接續授受動詞的行爲一文，之後發現OOP對於變量和方法的封裝正好類似於の和が接續名詞和動詞，也就有了本文。\n","date":"2021-07-05T12:59:56+08:00","image":"https://ming.ling.moe/posts/no-and-ga-under-oop-views/cover_hu2d7fe98771aa7bba84c77eadae6be665_366511_120x120_fill_q75_box_smart1.jpg","permalink":"https://ming.ling.moe/posts/no-and-ga-under-oop-views/","title":"以OOP的視角看が和の"},{"content":"$$ \\gdef\\dif{\\mathop{}\\!\\mathrm{d}} \\gdef\\elr{\\mathrm{e}} $$\n序 傳輸線模型是最簡單的分佈參數電路. 雖說如此, 但因不是強電相關專業, 學電路時老師並沒有講到這裏. 所以也就只能自學. 因此鳴鈴想撰文釐清一下學習思路、總結一下學習成果.\n在本節內容之前學到的電路, 無論是探究穩態的正弦交流或直流, 抑或者探究暫態過程的各種響應. 其電路的模型都是集總參數電路. 集總參數電路是由集總元件連接成的電路, 其中的詳細定義鳴鈴也不怎麼會背, 引用 一下 集總電路中的內容：\n集總元件是指元件大小遠小於電路工作頻率相對之電磁波波長時, 對所有元件之統稱. 對於信號而言, 不論任何時刻, 元件特性始終保持固定, 與頻率無關. 相反地, 若元件大小與電路工作頻率相對之波長差不多或更大的時候, 則當信號通過元件之時, 元件本身各點之特性將因信號之變化而有所不同, 則此時不能將元件整體視為一特性固定之單一體, 而應稱為分布元件 （Distributed element）, 例如微波電路就是其中一個例子. 在此種電路中傳統之導線很可能會成為具有電感及電容串並聯特性之複雜組合.\n總的來說, 不论集總还是分布, 都是在某些條件下, 電路元件的一種抽象化模型. 和質點、點電荷等概念類似, 集總參數是和空間分佈無關的. 而分佈參數就類似於密度的定義, 其分布是和空間相關的. 不如說在傳輸線的場景中, 分佈參數本身就是密度.\n建模 Heaviside 所提出的傳輸綫是這樣一種模型, 對於平行直導線或同軸綫間, 不可避免存在不完全絕緣的電介質. 因此而產生綫間的漏電流. 對於導線間, 我們可以認爲綫間存在寄生的電容和電導連續分佈. 而沿着線上, 必然存在壓降且電流會在週遭形成磁場, 因此可以認爲導線上存在電阻和電感連續分佈.\n對於空間中某個變量連續分佈的模型. 其實我們有現成的模型來解決, 那就是密度（廣義上的）. 如果我們沿着這個思想, 就可以構建沿着綫均勻分佈着無窮多無窮小的集總參數二端口網絡的模型. 如下圖所示\n傳輸線模型 如同大多數「密度」的定義, 我們需要求的是傳輸線的參數分佈服從怎樣的規律. 而這些規律又能得出怎樣的結論. 不難看出, 對於傳輸線而言, 其參數應當是一種綫密度, 即其分佈的空間爲 $\\R$. 對於鳴鈴這種數學弱弱的人來說其實是很方便的.\n列方程 因爲要考慮時變信號, 在 $t$ 時, 取傳輸線上 $x$ 處的某點處的傳輸線元素（鳴鈴仿照「線元」的說法稱之爲「傳輸線元」）. 稱上方的綫叫「來綫」下方的線叫「回線」. 左端來綫電流爲 $i(x, t)$, 線電壓爲 $u(x, t)$. 線電阻爲 $R$, 電感爲 $L$, 寄生電容爲 $C$, 電導爲 $G$，線元的長度爲 $\\Delta x$. 則右端的綫電流爲 $i(x+\\Delta x, t)$, 綫電壓爲 $u(x+\\Delta x, t)$.\n傳輸線元 宣告了這麼一堆變量，是要幹什麼呢？電路建模當然要列一下 KVL 和 KCL 啦: $$ i(x, t) = i(x+\\Delta x, t) + Gu(x+\\Delta x, t) + C\\frac{\\partial u}{\\partial t} (x+\\Delta x, t) $$ $$ u(x, t) = u(x+\\Delta x,t) + Ri(x, t) + L\\frac{\\partial i}{\\partial t}(x, t) $$ 然後, 稍作變形, 成如下形式 $$ \\frac{i(x+\\Delta x, t) - i(x, t)}{\\Delta x} = -\\frac{G}{\\Delta x}u(x+\\Delta x, t) - \\frac{C}{\\Delta x}\\frac{\\partial u}{\\partial t}(x+\\Delta x, t) \\tag{1} $$ $$ \\frac{u(x+\\Delta x, t) - u(x, t)}{\\Delta x} = -\\frac{R}{\\Delta x}i(x,t) - \\frac{L}{\\Delta x}\\frac{\\partial i}{\\partial t}(x,t) \\tag{2} $$ 看着這個形式，總感覺想到了什麼. 是什麼呢？ 我們對 (1), (2) 式兩邊同時取極限: $\\Delta x \\to 0$. 首先, 對等號左邊: $$ \\lim_{\\Delta x \\to 0} \\frac{i(x+\\Delta x, t) - i(x, t)}{\\Delta x} = \\frac{\\partial i}{\\partial x} \\tag{3} $$ $$ \\lim_{\\Delta x \\to 0} \\frac{u(x+\\Delta x, t) - u(x, t)}{\\Delta x} = \\frac{\\partial u}{\\partial x} \\tag{4} $$ 其次，等號右邊，類比密度的定義, 定義1: $$ \\lambda_R \\coloneqq \\lim_{\\Delta x \\to 0} \\frac{R}{\\Delta x} \\tag{5} $$ $$ \\lambda_L \\coloneqq \\lim_{\\Delta x \\to 0} \\frac{L}{\\Delta x} \\tag{6} $$ $$ \\lambda_G \\coloneqq \\lim_{\\Delta x \\to 0} \\frac{G}{\\Delta x} \\tag{7} $$ $$ \\lambda_C \\coloneqq \\lim_{\\Delta x \\to 0} \\frac{C}{\\Delta x} \\tag{8} $$\n另外，設 $u$ 和 $\\displaystyle\\frac{\\partial u}{\\partial t}$在 $x$ 上連續2則: $$ \\lim_{\\Delta x \\to 0} u(x+\\Delta x, t) = u(x,t) \\tag{9} $$ $$ \\lim_{\\Delta x \\to 0} \\frac{\\partial u}{\\partial t}(x+\\Delta x, t) = \\frac{\\partial u}{\\partial t}(x, t) \\tag{10} $$\n根據極限運算規則，將 (3) ~ (10) 代入 (1) 和 (2) 式中, 得到 $$ \\begin{cases} \\begin{aligned} \u0026amp;\\frac{\\partial i}{\\partial x} = -\\lambda_G u - \\lambda_C \\frac{\\partial u}{\\partial t} \\cr \u0026amp;\\frac{\\partial u}{\\partial x} = -\\lambda_R i - \\lambda_L \\frac{\\partial i}{\\partial t} \\end{aligned} \\end{cases} $$ 這便是電報方程3(省略自變量).\n解 下面來討論幾種邊界條件（主要是輸入電壓/電流）下的情況，從簡單到複雜來看:\n直流 直流時，設 $i(x,t) = I(x)$ ,$u(x,t) = U(x)$, 從而 $\\displaystyle\\frac{\\partial u}{\\partial t} = 0$, $\\displaystyle\\frac{\\partial i}{\\partial t} = 0$. 代入電報方程得 $$ \\begin{cases} \\begin{aligned} \u0026amp;\\frac{\\dif I}{\\dif x} = -\\lambda_G U \\cr \u0026amp;\\frac{\\dif U}{\\dif x} = -\\lambda_R I \\end{aligned} \\end{cases} \\tag{11} $$ 誒\u0026hellip; 微分方程怎麼解來着？ 對於這個二元一階方程組可以互相消元成爲兩個獨立的一元二階常係數線性微分方程: $$ \\begin{cases} \\begin{aligned} \u0026amp;I\u0026rsquo;\u0026rsquo; - \\lambda_G\\lambda_R I = 0 \\cr \u0026amp;U\u0026rsquo;\u0026rsquo; - \\lambda_G\\lambda_R U = 0 \\end{aligned} \\end{cases} $$ 得通解爲 $$ \\begin{gathered} I = C_1\\elr^{\\sqrt{\\lambda_G\\lambda_R}x} + C_2\\elr^{-\\sqrt{\\lambda_G\\lambda_R}x} \\cr U = C_3\\elr^{\\sqrt{\\lambda_G\\lambda_R}x} + C_4\\elr^{-\\sqrt{\\lambda_G\\lambda_R}x} \\end{gathered} $$ 接下來如果要求特解就成爲了一個邊值問題了. 可是\u0026hellip; $C_1, C_2, C_3, C_4$ 有四個未定常數, 但一維變量的邊界條件只有兩個, 如果代入邊界條件方程組必然亞定. 嗚唔, 這可怎麼辦呀.\n不用擔心. 鳴鈴雖然無能, 但是會學習呀. $C_1, C_2$ 其實和 $C_3, C_4$ 是相依的（而且是線性相依）. 即 $C_1, C_2$ 可由 $C_3, C_4$ 線性表示. 那麼究竟要怎麼得到這個結論呢？ 答：書本上寫的 當然不是啦! 我們可以把通解代廽4方程組 (11) 中有:\n正弦穩態 這裏給出正弦穩態信號的解的過程.\n暫態響應 分別爲電阻、電感、電導、電容的線密度.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n古典物理學中有一句格言：「自然界中，一切都是連續的.」\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n《電路》: ISBN 978-7-04-019671-9 中稱其爲「均勻傳輸線方程」，但是不一定本文中只有 $\\lambda$ 與 $x$ 無關，才可稱爲「均勻」. 若 $\\lambda_R$ 和 $\\lambda_G$ 爲 $0$ 則稱爲無損耗傳輸線.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n雖然鳴鈴能夠證明之，但卻不懂箇中動機. 即「我們知道加上邊界條件也解不出 $C_1 \\cdots C_4$ 但是什麼能讓我們得知他們並非相互獨立，從而通過廽代解出其中的關係」.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2021-07-03T20:54:56+08:00","image":"https://ming.ling.moe/posts/all-about-transmission-line/cover_hu04f9cff6700a6865503e4f85d309dd17_642308_120x120_fill_q75_box_smart1.jpg","permalink":"https://ming.ling.moe/posts/all-about-transmission-line/","title":"傳輸線模型（未完稿）"},{"content":"列位！諸君！鳴鈴最近和朋友在策劃一個社區向的伺服器，落成後歡迎來玩！\n綱要 該伺服器名稱未定，但其應有以下特徵：\n私有：不向陌生人開發 在線：Online Mode 香草：保留 Vanilla 風格地 Modded 沉浸：Mod 以增強遊戲PE與機能爲要 求新：在已有 Mod 兼容的前提下，使用最新版本的 Minecraft. 爲什麼要私有呢，因爲大家都有自己的正業，所以希望儘量降低管理成本。 因此若汝想一起來玩的話，需要接受適應性審查。或者由一名或以上的本服玩家擔保，邀請汝加入我們。\n爲了避免任何潛在的政治風險，Online Mode 是必要的，因爲 Online Mode 下的聊天信息（包括其他的數據包）是經加密的1。 如此可以增加對話被監聽的難度。同時所有的聊天記錄將不會被保留。 在今後，或許會自己開發 Mod 將文字聊天與語音聊天功能轉移至獨立伺服器上，並增強加密算法。\nMod 列表 以上列諸項爲綱，選取以下 Mod。\nName Tags 功能 問題 Adorn BS DE Add lots of furniture AppleSkin CO UI 飽食度 Better Biome Blend CO UI 生態域邊界優化 Better Third Person CO UI 第三人稱視角優化 bits and chisels DE 方塊雕刻 Canvas CO UI PE 光影依賴模組 Charm BS DE 更多風格的物品 Charmonium BS UI 添加 BGM Dark Paintings DE 增加一些畫作 Entity Culling CO PE 實體渲染優化 ExtraSounds CO DE 增加 UI 操作的音效 Farmer\u0026rsquo;s Delight BS DE 增加農業和食品機能 Server-side is NA yet FerriteCore BS PE better memory performance First-person Model CO DE 添加第一人稱視角優化 Grim\u0026rsquo;s Transportables BS DE 中世紀馬車 Immersive Portals DE 好看的傳送門 Conflicting with Canvas Lithium SO PE 優化 game physics, mob AI, block ticking, etc Mod Menu CO UI 遊戲內管理 Mod Not Enough Animations CO DE 增加動作動畫 Not Enough Crashes CO DB 打印錯誤信息 Phosphor SO PE 光照優化 Outdated Simple Voice Chat BS UI 語音聊天 瓶頸時考慮替換 mumblelink Smooth Boot CO PE CPU 優化 Spark BS PE RAM 優化 Physics Mod UI 添加物理效果 Presence Footsteps DE 腳步聲優化 Dropz UI 落體物理 Outdated Fluid Physics SO FN 流體物理 Will Crash Fabric Seasons DE FN 加入季節變化 上述 Tags 中\nBS (Both Side): 需要同時在客戶端和伺服端安裝 CO (Client Only): 惟需於客戶端安裝 SO (Server Only): 惟需於伺服端安裝 DE (Decoration): 裝飾性 Mod FN (Function): 更改遊戲機能的 Mod UI (User Interface): 優化遊戲 UI 顯示 PE (Performance): 效能增強 DB (Debug): 排錯調試 爲方便今後開發私有 Mod 以增添附屬功能，選取 Fabric 作爲 Mod Loadder。目前還在調試之中，如果調試完成本文會繼續更新。\nhttps://wiki.vg/Protocol_Encryption\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2021-07-01T16:59:16+08:00","image":"https://ming.ling.moe/posts/new-mc-server/cover_hudb8a155cf57091deb506ad941274249d_926158_120x120_fill_box_smart1_3.png","permalink":"https://ming.ling.moe/posts/new-mc-server/","title":"MC:JE 鯖策劃案（更新中...）"},{"content":"鳴鈴在家閒得沒事幹，於是前兩日前去洛陽轉了轉，權當畢業旅行。但去洛陽的兩天真的有夠熱的，縱使撐着傘，依然感覺「背灼炎天光」。\n龍門石窟 龍門石窟確實古老，而且聽說文革時被紅小將們砸了不少。但鳴鈴一非佛教徒、二非學者、三非雕塑造像藝術家，對其亦沒有什麼太大的興趣。（即便走在伊水畔也絲毫不涼快就是了）\n蔣宋別墅 唯一令鳴鈴感興趣的是位於龍門石窟景區伊水東岸香山上的蔣宋別墅。這個別墅是當時河南政府爲先總統夫婦修築的。位於中國大陸並同中國國民黨相關的景點，必然存在國父遺像、🇹🇼 青天白日滿地紅國旗和青天白日旗。當然啦，這裏也不例外.\n會客廳 會議室 遺民淚盡胡塵裏\n南望王師又一年\n\u0026mdash;\u0026mdash; 陸游\n鳴鈴什麼時候才能逃離胡塵呢。\n才能自由 親愛精誠 唯一遺憾的是，🇹🇼 國旗沒有飄在旗杆上。 話說鳴鈴要是在那邊唱三民主義吾黨所宗以建民國以進大同的話，會被尋釁滋事的吧（怖いよ～\n白馬寺 白馬寺被長者稱爲「中國第一咕殺古剎」，當然，白馬寺名副其實。不得不提的一點是, 鳴鈴最喜歡白馬寺的門票：\n門票正面 門票反面 馬寺的門票所有漢字繁體直排，使用字體得當，寺院介紹以文言著，背景樸質而典雅，紙的撓度和表面粗糙度合適。無比重要的是，沒有什麼「國家xx級景區」、「重點xx保護單位」、「社會主義核心價值觀」、「依法納稅xx」之類意識形態的污染。票面上印有當年的干支，很有收藏價值。\n你是不是想問鳴鈴爲什麼不給時間和編號打馬賽克？嗯，鳴鈴覺得這種東西史塔西或者蓋世太保是很好調查的，如果他們真的想的話。\n泰國風格佛殿和緬甸風格佛殿對鳴鈴而言是很新鮮的：\n另外在泰國風格佛殿的某處門前放着這個牌子：\n超級可愛 關林 關林係關二爺的墓（雖說只有頭葬在這裏）。洛陽的這個關林是曹操爲其修築的。關林中有自大明國起至當代各種人立的碑，說實話滿有趣的。下面按朝代分類一下拍到的碑記。\n大明國 鳴鈴注意到：明朝時就已經開始混用「国」和「國」，還有「歷」和「曆」了。但是作爲年號應該是有唯一正確的寫法吧？\n大清國 下圖是乾隆年代所建的香爐，上面的花紋很漂亮，現在依然在使用。立於其前，雖然很熱，但更重要的是能嗅到歷史的氣息（別鬧啦，只是因爲爐內在焚香吧 -`д´- ） 此類有很長的歷史，卻依舊使用中，而非列於防爆玻璃展臺之內的文物真的感覺很奇妙。\n一般提到文物，給鳴鈴的印象就算不是陳設於展臺之上，也是石碑匾額之類單純供人觀賞的器物。所以鳴鈴就把這個還在使用中的香爐就拍了下來，這個香爐左右兩邊各有一個，鳴鈴攝的是右邊那個。\n中華民國 僞朝 沒有什麼值得拍攝的 :)\n跋 此行洛陽，鳴鈴覺得需要注意切不可在仲夏酷暑隨便出來玩，雖然鳴鈴沒有煤紋病，但沒有做好防曬措施是可能會誘發皮膚癌的！縱使去洛陽這種北方城市好像也不太行的樣子。，可以的話，儘量遠離北迴歸線吧 QAQ.\n","date":"2021-07-01T07:39:54+08:00","image":"https://ming.ling.moe/posts/lakuyou-2-days/cover_hu074d3caba4566f871fefa7f4be56a14b_623036_120x120_fill_q75_box_smart1.jpg","permalink":"https://ming.ling.moe/posts/lakuyou-2-days/","title":"神都二日遊記"},{"content":"序 鳴鈴曾經建過的 blog 也不少，用過 WordPress, Typecho 等基於 PHP 的 blog 軟體，最近也用過 Hexo 這種靜態頁面的 blog 軟體，最終因爲一些鳴鈴不願意透露的原因選擇了當前的 Hugo. 爲了省錢，敝站完全使用 Github 來構建，因此對於落魄的鳴鈴來講十分合適 (\n如果你想將本文作爲教程使用，至少需要以下知識儲備：\ngit 和 Github Hugo 靜態網頁開發 Blog 程式 Hugo 類似於 $\\LaTeX$ 將 .tex 檔案編譯爲 .dvi 或者 .pdf，其可以將十分利於人類讀寫的 Markdown 檔案編譯爲 blog 所需的靜態網頁.\n具體的使用方法可見於此\n部署 在編輯完成 Blog 後，使用 hugo server 以編譯，hugo 會將網站輸出在 \\public 目錄下。如果你有虛擬主機或者雲伺服器的話，便可以使用 Nginx 或者 Apache 之類的網頁伺服器來部署你的網頁了。\n但鳴鈴使用 Github Pages 來承載網站，並使用 Github Actions 來實現自動化部署到 Github Pages 上.\n首先我們需要兩個 repositories, 一個用來放 Hugo 的 blog 源碼，另一個用來放編譯生成的網站(用作 Github Pages).\nGithub Pages GitHub Pages 允許用家使用 Github Repository 託管自己的靜態網站。下面是使用步驟：\n建立名爲 [Github ID].github.io 的 repository ，其中 [Github ID] 替換爲你的 Github ID，以鳴鈴的博客舉例就是 narisuzu.github.io. 將靜態網站 Push 至上述 repository 中 在瀏覽器中欣賞你的網站~ 那麼我們只需要在電腦上編譯好 Blog, 把 \\public Push 至 [Github ID].github.io 就可以了. 或者乾脆不需要兩個 repo，只保留 [Github ID].github.io，將 源碼和 \\public 原封不動的 Push 上去也大功告成。但鳴鈴沒有這樣做，因爲我們可以自動化地執行某些步驟\u0026hellip;\nGithub Actions Github Actions 是 Github 推出的 Continous Integration (CI) 功能。 在此之前，鳴鈴使用過的 CI 產品有 Gitlab + Gitlab CI 和 Bitbucket + Circle CI, 不過在這裏我們要使用 Github Actions.\n我們需要讓 Github Actions 來完成的工作是，在存有源碼的 repo 更新時自動編譯，並將編譯結果部署於 Github Pages， 我們可以使用 hugo-setup 這個 Action 來實現我們自動化的需求.\n配置文件 在源碼的根目錄新建 .github/workflows/main.yml\nname: github pages # CI 的名稱 on: # 指定在何時觸發 push: branches: - master # 選定觸發 CI 的 branch pull_request: jobs: deploy: runs-on: ubuntu-latest steps: - name: checkout uses: actions/checkout@master with: submodules: true # Fetch Hugo 主題（如果你使用了子模塊來引入主題的話） fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo # 安裝 Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - uses: actions/cache@v2 with: path: /tmp/hugo_cache key: ${{ runner.os }}-hugomod-${{ hashFiles(\u0026#39;**/go.sum\u0026#39;) }} restore-keys: | ${{ runner.os }}-hugomod- - name: Build # 編譯 Hugo 內容 run: hugo --minify - name: Deploy # 部署 uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} external_repository: narisuzu/narisuzu.github.io # 部署至何 repo publish_branch: main # 部署至何 branch publish_dir: ./public cname: blog.ling.moe # 客製化域名的 CNAME 記錄 在這裏，因爲我們將 Github Pages 和源碼分置於不同的 repo ，因此用到了 external_repository: 以指定將編譯結果輸出至應用 Github Pages 的 repo。 但這會帶來一個問題：我們不能使用推薦的 github_token 了, 只能使用 deploy_key 或 personal_token 作爲存取令牌. 這裏使用 deploy_key （P.s. 存取令牌的作用是讓運行 Github Action 的虛擬機有權限部署網站至 Github Pages 的 repo 中）\nDeploy Key 使用以下代碼生成 RSA 公鑰和私鑰\nssh-keygen -t rsa -b 4096 -C \u0026#34;$(git config user.email)\u0026#34; -f gh-pages -N \u0026#34;\u0026#34; 你將得到兩個文件 gh-pages.pub (公鑰) 和 gh-pages (私鑰). 而後\n進入 Github Pages 所在 repo 的 Repository Settings， 將公鑰的內容添加至 Deploy Keys （記得要點選 \u0026ldquo;Allow write access\u0026rdquo; 以獲取寫入權限） 進入源碼的 repo 的 Repository Settings 中， 在 Secrets 中添加變量 ACTIONS_DEPLOY_KEY，其值爲私鑰. 設定完成後，主體功能就配置完成了，這時將源碼 Push 後，如果沒有錯誤的話就能在 [Github ID].github.io 中看到你的博客了. パチパチパチなのです！\n留言 敝站的留言功能由 utterances 🔮 提供，當然也是完全基於 Github 的。因此 utterances 只支持 Github 的登錄用戶留言，如果不能忍受這一點可以選擇其他產品如 disqus 等。\n其利用了 Github 的 issues 作爲資料存儲，因此需要一個 public Github repository 以存放留言的 issues，爲了方便管理留言以免真正的 issue 和留言混在一起，鳴鈴推薦你新建一個專用的 repository 給 utterances 使用。blog 中每一個可以留言的頁面都將映射成一個 issue，而留言內容就存儲在對應 issue 的對話串中。因此你可以指定頁面的索引格式，用來設定 blog 的貼文以何種方式映射至 Github issues.\n要想安裝 utterances ，首先你需要爲 repository 安裝 utterances 插件，這個插件的作用是將用戶的留言儲存至相關頁面的 issue 中。\n然後你需要在 blog 端配置 utterances 的客戶端，如果你的主題原生的支援 utterances ，你只需要按照主題作者提供的配置格式來配置即可。如若不然，你需要手動爲 hugo 添加 utterances 支援。\n在 utterances 官網內你可以詳細配置你的客戶端 repository，條目索引，主題等設定項，而後在下方能獲得類似這樣的代碼片段:\n\u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;[ENTER REPO HERE]\u0026#34; issue-term=\u0026#34;pathname\u0026#34; theme=\u0026#34;github-light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 將這段代碼複製到 hugo 需要有留言區的頁面的 head 中即可，具體方法可以閱讀 hugo 的文檔或者參考有相關功能的主題。\n優化 我們將網站和源碼分置了，這樣做的好處有以下幾點\n簡化項目結構，減小上傳的體積 可以將源碼的 repo 設成私有（免費版 Github 不支持將 Github Pages repo 設爲私有） 還沒有想到 那麼我們就不需要向源碼的repo中上傳任何編譯時生成的檔案了，因此新建 .gitignore 並寫入\n/public/ /resources/_gen 以讓 git 忽略 /public 和 /resources/_gen 這兩個目錄.\n擴展功能 鳴鈴使用了 hugo 提供的 shortcode template 功能添加了一些 hugo 沒有提供，主題方亦沒有提供的功能。\nsvg icon 在敝站中可以看到一些很可愛的行內小圖標，他們來自於 tabler icons 或 fontawesome.\n要想在 hugo 中便捷地使用這些圖標，首先要在 head 中引入相關的 CSS：\n\u0026lt;!--引入 tabler icons--\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/@tabler/icons@latest/iconfont/tabler-icons.min.css\u0026#34;\u0026gt; \u0026lt;!--引入 fontawesome--\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://pro.fontawesome.com/releases/v5.10.0/css/all.css\u0026#34; integrity=\u0026#34;sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; /\u0026gt; 其後，在 [hugo根目錄]/layouts/shortcodes 下新建 ti.html，並寫入:\n{{ $iconid := (.Get 0) }} \u0026lt;i class=\u0026#34;ti ti-{{$iconid}}\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 就可以得到 tabler 圖標, 打開 tabler官網，查找你想要插入的圖標，而後複製圖標的名。\ntabler 圖標 在 .md 源碼中你想插入的位置處輸入 {{\u0026lt; ti \u0026quot;[圖標名]\u0026quot; \u0026gt;}} 即可插入。上圖的例子中你應該輸入 {{\u0026lt; ti \u0026quot;brand-tabler\u0026quot; \u0026gt;}}。\n類似地，在 [hugo根目錄]/layouts/shortcodes 下新建 fa.html，寫入:\n{{ $fi := (.Get 0) }} {{ $se := (.Get 1) }} \u0026lt;i class=\u0026#34;inline-icon {{$fi}} fa-{{$se}}\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 就可以得到 font awesome 圖標, 打開 fontawesome 官網, 查找你想要插入的圖標，而後複製圖標的分類和名。 使用 {{\u0026lt; fa \u0026quot;[圖標分類]\u0026quot; \u0026quot;[圖標名]\u0026quot; \u0026gt;}} 來插入. 其中 [圖標分類] 指的是官網中 fab 或者 fac 之類的分類。\n文本摺疊 對於長文本，摺疊的功能是必要的，鳴鈴使用了 HTML5 新增的 \u0026lt;details\u0026gt;\u0026lt;/details\u0026gt; 和 \u0026lt;summary\u0026gt;\u0026lt;/summary\u0026gt; 標籤以實現之.\n這裏可以展開哦 嘿嘿 (OwO\n在 [hugo根目錄]/layouts/shortcodes 下新建 details.html，寫入:\n{{ $summary := .Get 0 }} \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;{{ $summary }}\u0026lt;/summary\u0026gt; \u0026lt;p\u0026gt;{{ safeHTML .Inner | markdownify }}\u0026lt;/p\u0026gt; \u0026lt;/details\u0026gt; 而後，在你想使用處貼入\n{{\u0026lt; details \u0026#34;這裏可以展開哦\u0026#34; \u0026gt;}} 嘿嘿 (OwO {{\u0026lt; /details \u0026gt;}} 就能達到上面的效果啦~\nmermaid mermaid 可以爲你的 blog 添加一些圖。 在 [hugo根目錄]/layouts/shortcodes 下新建 mermaid.html，寫入:\n\u0026lt;div class=\u0026#34;mermaid\u0026#34; align=\u0026#34;{{ if .Get \u0026#34; align\u0026#34; }} {{ .Get \u0026#34;align\u0026#34; }} {{ else }} center {{ end }}\u0026#34;\u0026gt; {{ safeHTML .Inner }} \u0026lt;/div\u0026gt; 而後可以通過下列代碼使用\n{{\u0026lt; mermaid \u0026gt;}} //mermaid 源碼 {{\u0026lt; /mermaid \u0026gt;}} 問題記錄 draft: true 帶來的問題 ℞：草稿貼文是不會被編譯的，因此要注意使用站內引用 {{\u0026lt; ref \u0026gt;}} 時，不要引用草稿貼文。\nP.s. 鳴鈴被此問題困擾了好久的說 ，hugo server -D 正常但 hugo 就報錯 (・–・;)ゞ\nwebp 錯誤 ℞：目前 Hugo 還不支援 webp 圖像，如果遇到 webp 的錯誤就換成 png/jpeg 吧.\n總結 哼哼，能夠完全基於免費的服務新建可靠，功能完備的 blog 還是滿有成就感的.\n","date":"2021-06-26T18:50:11+08:00","image":"https://ming.ling.moe/posts/hugo-with-all-github/github_hu351bd16911fad72d90986b22d55aee43_1191334_120x120_fill_q75_box_smart1.jpg","permalink":"https://ming.ling.moe/posts/hugo-with-all-github/","title":"Hugo ❤ Github"},{"content":"BJT實現 無穩態多諧振盪器 運放實現 邏輯門實現 555定時器實現 ","date":"2021-06-25T04:21:11+08:00","image":"https://ming.ling.moe/posts/all-about-multivibrator/cover_hu3d03a01dcc18bc5be0e67db3d8d209a6_1812389_120x120_fill_q75_box_smart1.jpg","permalink":"https://ming.ling.moe/posts/all-about-multivibrator/","title":"多諧振蕩器"},{"content":"衆所周知的，日語中的主語常常隱藏因此會產生一系列難解的問題。本文所描述的就是授受動詞動詞接續授受動詞的行爲。 爲什麼會有這個問題呢，最初學習「 V て下さい」的時候，被生硬的翻譯成了「請」。之後又學習了：\nてくれない てくる てあげる てやる てくださる てくださいませんか てくれないでしょうか ていただけませんか ていただけないでしょうか ぁせていただけませんか ぁせていただけないでしょうか ぁせてもらえないでしょうか 等等動詞或使役動詞接續授受動詞的用法。「能不能\u0026hellip;」「請\u0026hellip;」「請允許我\u0026hellip;」這種翻譯學習方法實在過於難受，沒有很好的復用性，於是某一天在看新聞時看到了店鋪的「\u0026hellip;休ませていただきます」就考慮了，一瞬間魚認爲其動詞是「いただく」那麼主語應該是店家吧，而且按照想表達的意思，「休む」也應該是店家的行爲。但再一想，「休む」使用的是使役型呀，那麼主語不應該是顧客嗎？但「いただく」又是拿來的意思，主語應該是纔店家對吧。\n然後花五分鐘仔細思考回想對比了幾個授受動詞的例句後，就有了這篇文章的內容。事實上，考慮非從句的一般授受句型，授受動詞的主語和雙賓（其實不準確，に修飾的不是賓語，但這裏借用英文的雙賓語的概念）分別是物品的接受或發送者(或者相反)，那麼這就是一種約束。現在考慮的是在從句情況下，這種約束關係會帶來怎樣的效果。對於授受動詞而言上述的從句都是雙賓語的「賓語從句」，不難理解，從句的動作便是主句主語傳遞的對象，和非從句情況的授受動詞一樣。\n下面來分類討論一下。\n分類討論 やる \u0026amp; 上げる \u0026amp; 申し上げる 這三個動詞且不論尊敬禮貌與否，其接續名詞方向都是從主語向雙賓的。即被傳遞的物品是主語發出，而雙賓接受的。\n例：本を上げる\ngraph LR 主語--本--\u003e雙賓 書是由主語發出的。再考慮從句的情形，假設以下從句\n例：遊んであげる\n按照上圖的約束類比得知，「遊んで」也應該由主語發出由雙賓接受（即作用於雙賓語）. P.s. 這句話來自動畫《蜘蛛ですが、なにか？》22 話，魔王所說.\nくれる \u0026amp; 下さる 例：牛丼をください graph LR 主語--牛丼--\u003e雙賓 再考慮從句情況，典型例句爲「座ってください」。 和上面的例子類比分析一下，「座って」這個動作作爲被授受的主體，其應該受「下さる」的方向約束。即必須是由 主句動詞的主語發出，而雙賓語接受的。和前例正好相反。\n從圖可知，くれる和上げる的模式是完全相同的，其方向都是從主語到雙賓語的。二者唯一的區別是句子成分的身份（不是本文討論的內容，但一個「上」一個「下」也應該能管中窺豹）。\nもらう \u0026amp; 頂く 例：プレセントをもらう graph RL 雙賓--プレセント--\u003e主語 典型例句爲「教えてもらった」，其中もらう約束了主句雙賓語必然是物品的提供者或者動作的主語，在例句中 即從句「教えて」的主語是主句的雙賓語。而在前兩種動詞，從句和主句的主賓都是一致的，而「もらう」和「いただく」卻是相反的，這一點也是第一時間難以反應的原因。\n纏め 由以上三例可以看出，主句和從句的主句是沒有什麼關係的。文法上，主句的主語只由主句動詞決定，從句的主語只由從句動詞決定。但是在主語隱藏的情況下，是可以通過授受動詞的方向約束和從句動詞的形式與含義來推斷出主語是誰的。比如開始的「\u0026hellip;休ませていただきます」，顯然從主句可以推斷出這句話的主語接受到了某人的許可可以休假，然後從句是休假的使役型，因爲自己讓自己休假顯然沒有什麼意義，那麼從句省略的主語就是看到看板的顧客們。\n","date":"2021-06-12T13:23:10+08:00","image":"https://ming.ling.moe/posts/jyu-jyu-dou-si/cover_hu3c14a78fca0a60a3358e30cb982d0229_4290743_120x120_fill_q75_box_smart1.jpg","permalink":"https://ming.ling.moe/posts/jyu-jyu-dou-si/","title":"動詞接續授受動詞的行爲"},{"content":"破題 不，鳴鈴不是想討論一般情況下開門的問題，在《異世界食堂》動畫作品中，鳴鈴看到了一個彈幕：\n「要是有兩個異世界人同時打開門會怎麼樣？」\n在《異世界食堂》的世界觀中，每當禮拜六在異世界的各處就會出現通往「洋食のねこや」之門。開了這扇門就能進入 日本的「洋食のねこや」料理屋。那麼食堂只有一個，但傳送門有很多個，慾使彈幕中的問題有意義的話，更準確的表述應該是：如果有多個異世界人同時打開不同的門會怎樣？\n怎樣？ 在全片中沒有出現過問題中的情況，也沒有解釋這種情況。當然作品中從沒發生過和概率爲零是兩個不同的概念。 那麼有什麼辦法可以解釋這個現象或者解決這個問題呢？首先定義一下什麼叫同時打開門，兩個開門事件在同時發生的概率爲 $0$ , 因爲一個時刻在數軸上是一個點，傳送門出現的時間是週六一天 $24$ 小時。那麼，我們不妨把一次從開門事件到關門事件的過程稱爲一個開放區間，兩個開放區間有重疊稱爲同時打開門。那麼問題就是，如何處理兩個不同的開放區間可能重疊的問題。\n那麼矛盾在哪裏呢？在動畫畫面中可以看到，在從食堂朝向外面的畫面中，我們可以知道在食堂中是能直接看到外界的，同時也有從外向內的畫面。\n炸肉餅二世的門外 炸蝦一世的門外 顯然地，不同的人開門，門外的景色是不同的。由此可知，開門過程是不能有阻塞的。\n🎲概率 要解決這個問題，最簡單的就是讓兩個開放區間不可能重疊，即令異世界中所有的事物構成一個精密的系統，如波函數坍塌一般，當一個門被打開，則其他的門被打開的概率變爲 $0$，不是指門打不開，而是指在異世界中根本不可能有人去開其他門，通過某種魔法或者猶未可知的機理（畢竟傳送門就已經夠魔幻了）\n🌊緩衝區 首先給出結論：使用任何形式的 channel，包括 std::sync::mpsc 和 chan 都是不行的。因爲真實世界中所要求的是絕對的同時。而使用 channel 時，channel 同時只能發送一個物件，其他的發送會被阻塞。因此是無法解決問題的。\n那如果使用帶緩衝區的信道呢？當進入門後都先被傳送入一個佇列（可能是一片魔法空間）中，稱其爲 Buffer，然後遵循 FIFO 的過程，當門被關上時則將 Buffer 中下一位顧客傳入，而且因爲是異世界不需要考慮緩衝區大小的問題。這麼雖然可行，但是顯然不符合作品設定，因此也 PASS.\n🔒互斥鎖 鳴鈴認爲最有意思也是最現實的就是使用互斥鎖（Mutex）了。顯然的，在動畫畫面中傳送門上也是存在門鎖的。那麼只需要作很小的設定就可以解決這個問題：當一個開門的上升沿（大概位於門把手被轉下去的時刻），互斥鎖會被上鎖，然後其他地方的傳送門就不能再次爲 Mutex 上鎖，從而即使壓下門把手也不能打開門，就如同門鎖被物理地鎖上了一樣。當門被關上後，Mutex 被解鎖，其他的門就可以再次打開了。\n同時鳴鈴注意到了，在動畫中人餐後離開食堂關上門後，門就會消失掉。這裏可以設定爲門被析構的同時 Mutex 被解鎖，就像 std::sync::Mutex 一樣.\n🔂引用計數 如果愛好燉牛肉的六柱之赤從別人的門走出來了，不就不妙了嗎？（從月球上的門走出來似乎沒什麼問題）\n赤女王 那麼怎麼設計可以使顧客能夠從進入時的門走出呢？\n我們可以設定當一名顧客進門時，會攜帶一個上下文 context （可以用魔法實現），其中包含了其所打開的門的引用 reference，從而在出門時食堂只需要讀取上下文中的傳送門引用就可以再次打開進入時的那扇門。\n還有，在咖喱飯和炸蝦中可以看到，一個門是允許多個人進入的，那麼要怎麼實現才能讓由同一扇門進入的最後一人出門時，該處的門再消失呢。使用引用計數可以解決這個問題，異世界各處的門都有一個引用計數器，當顧客進門時會進行計數，每人進入就自增一，當計數器爲零時則門構析.\n所有的內容都是鳴鈴突發奇想，請不要認真:) 另外，異世界的白色污染問題也值得討論\n","date":"2021-06-12T11:02:02+08:00","image":"https://ming.ling.moe/posts/what-if-two-different-people-open-the-door-simultaneously/Isekai_Shokudo_Vol1_hua3b5ef3d8ad153eb71e4de820d5d50d2_345788_120x120_fill_q75_box_smart1.jpg","permalink":"https://ming.ling.moe/posts/what-if-two-different-people-open-the-door-simultaneously/","title":"兩個人同時開一個門會怎麼樣？"},{"content":"$$ \\gdef\\dif{\\mathop{}\\!\\mathrm{d}} $$\n破題 《新概念物理教程. 電磁學》第四章中寫道\n\u0026hellip; $$\\oiint\\boldsymbol{D}\\cdot\\dif\\boldsymbol{S} = \\sum q_0 \\tag{1}$$ 比較兩式，似乎應有 $\\boldsymbol{D} = \\varepsilon_0\\boldsymbol{E}_0$ ,即 $\\boldsymbol{D}$ 與極化電荷無關. 我們在例題 7 和 8 中確實看到這種情況. 是否可以認爲電位移矢量 $\\boldsymbol{D}$ 就是 $\\boldsymbol{E}_0$ 的 $\\varepsilon_0$ 倍呢？否！\n\u0026hellip;\n書中還説：\n高斯定理只反映矢量場的一個側面，單靠他不能把矢量場的分佈完全確定下來. 反應矢量場另一個側面的是環路定理。\n並介此來説明上述的結論。提到「側面」一詞總是令鳴鈴有種攪渾水的感覺。雖然鳴鈴相信其結論的正確性，但畢竟是沒有證明這若同時滿足了兩個「側面」則矢量場可被唯一確定（簡單猜測和唯一性定理有關，高斯定理和環路定理的微分形式可以推出 Poisson 方程，而後可以證明邊界條件下勢函數的梯度是唯一的，則電場是唯一的）。\n因此呢，鳴鈴在圖書館坐了半個小時，想出了一個等效的證明，而且更加直觀。 求證： $$\\boldsymbol{D} = \\varepsilon_0\\boldsymbol{E}_0 \\tag{2}$$ 不總是成立\n解 我的證法不是直接證明(2)式，而是證明它的一個等價命題.\n由 $\\boldsymbol{D}$ 的定義 $$ \\boldsymbol{D} = \\varepsilon_0\\boldsymbol{E} + \\boldsymbol{P} $$ 由 $\\boldsymbol{E} = \\boldsymbol{E}_0 + \\boldsymbol{E}\u0026rsquo;$ $$ \\boldsymbol{D} = \\varepsilon_0\\boldsymbol{E}_0 + \\varepsilon_0\\boldsymbol{E}\u0026rsquo; + \\boldsymbol{P} $$ 則，預證 (2) 式，等價於求證 $$ \\boldsymbol{P} = -\\varepsilon_0\\boldsymbol{E}\u0026rsquo; \\tag{3} $$ 不總是成立.\n退極化場 $\\boldsymbol{E}\u0026rsquo;$ 由 $q\u0026rsquo;$ 激發, 考慮任意有向面元 $\\dif\\boldsymbol{S} = \\hat{\\boldsymbol{n}}\\dif{S}$ , 設面元上帶有 $\\dif{q\u0026rsquo;}$ 的極化電荷, 由 Gauss 定理可知 $\\boldsymbol{E}\u0026rsquo;\\cdot\\hat{\\boldsymbol{n}} = 0$ . 但是，對於 $\\boldsymbol{P}$ 而言，其穩態方向等於 $\\boldsymbol{E}$ 的方向, 而 $\\boldsymbol{E} = \\boldsymbol{E}_0 + \\boldsymbol{E}\u0026rsquo;$. 因此, 唯有 $\\boldsymbol{E}\u0026rsquo; \\parallel \\boldsymbol{E}_0$ 時 (即 $\\boldsymbol{E}_0 \\perp\\hat{\\boldsymbol{n}}$), $\\boldsymbol{P} \\parallel \\boldsymbol{E}\u0026rsquo;$ 成立. 因此在其他情況下 (3) 式不成立, 則 (2) 式也不成立.\n思考 本文只從方向上粗淺的說明, 那麼該如何理解這個結論呢. 這個結論說明了: 電介質的形狀是決定極化的重要因素. 因爲形狀決定了界面的法向, 而退極化場總是朝法向的, 退極化場是由極化電荷激發的, 而極化電荷則是由極化強度矢量決定的. 而極化的方向並沒有義務正交於界面, 因此電介質形狀的不同就會導致極化強度不同. 從而導致極化電荷的分佈乃至最終電場的不同.\n","date":"2021-06-10T00:39:17+08:00","image":"https://ming.ling.moe/posts/epsilon-e-is-not-d/cover_hu934a5b096d8bdeb1e3cd05ce0789d650_92680_120x120_fill_q75_box_smart1.jpg","permalink":"https://ming.ling.moe/posts/epsilon-e-is-not-d/","title":"𝜀₀𝑬 不是 𝑫"},{"content":"$$ \\gdef\\uv#1{\\hat{\\boldsymbol{#1}}} \\gdef\\dif{\\mathop{}\\!\\mathrm{d}} \\gdef\\imi{\\mathrm{i}} \\gdef\\imj{\\mathrm{j}} \\gdef\\elr{\\mathrm{e}} \\gdef\\Ft{\\mathscr{F}} \\gdef\\Lt{\\mathscr{L}} \\gdef\\dB{\\mathrm{dB}} \\gdef\\Hz{\\mathrm{Hz}} \\gdef\\Ohm{\\Omega} \\gdef\\Volt{\\mathrm{V}} \\gdef\\Amp{\\mathrm{A}} \\gdef\\Wat{\\mathrm{W}} \\gdef\\Col{\\mathrm{C}} \\gdef\\Far{\\mathrm{F}} \\gdef\\Var{\\mathrm{Var}} \\gdef\\milli{\\mathrm{m}} \\gdef\\micro{\\mu} \\gdef\\kilo{\\mathrm{k}} \\gdef\\grad{\\mathop{\\mathrm{grad}}} \\gdef\\dive{\\mathop{\\mathrm{div}}} \\gdef\\rot{\\mathop{\\mathrm{rot}}} \\gdef\\perm#1#2{^#1\\! P_#2} \\gdef\\sgn{\\mathop{\\mathrm{sgn}}} $$\n本文主要對站內的理工科符號設立標準。因爲博客所設分野較廣，所以呢對於符號的使用需要有一定的原則. 首先，對於標點符號，應采用半角標點。對於公式符號的標準，參考了 ISO、IUPAC、Unicode 和教科書等處的公式后，總結出僅適用於本站的標準。 在本站的其他文章當中底公式符號等若無特殊注明之處皆應爲本頁所載之含義。\n一般而言，本標準有幾個原則所約束：\n變量使用斜體 向量/矢量/矩陣等複合量使用粗體 算符和單位不適用斜體 矩陣使用方括號 $$ \\gdef\\uv#1{\\hat{\\boldsymbol{#1}}} \\gdef\\dif{\\mathop{}\\\\!\\mathrm{d}} \\gdef\\imi{\\mathrm{i}} \\gdef\\imj{\\mathrm{j}} \\gdef\\elr{\\mathrm{e}} \\gdef\\Ft{\\mathscr{F}} \\gdef\\Lt{\\mathscr{L}} \\gdef\\dB{\\mathrm{dB}} \\gdef\\Hz{\\mathrm{Hz}} \\gdef\\Ohm{\\Omega} \\gdef\\Volt{\\mathrm{V}} \\gdef\\Amp{\\mathrm{A}} \\gdef\\Wat{\\mathrm{W}} \\gdef\\Col{\\mathrm{C}} \\gdef\\Far{\\mathrm{F}} \\gdef\\Var{\\mathrm{Var}} \\gdef\\milli{\\mathrm{m}} \\gdef\\micro{\\mu} \\gdef\\kilo{\\mathrm{k}} \\gdef\\grad{\\mathop{\\mathrm{grad}}} \\gdef\\dive{\\mathop{\\mathrm{div}}} \\gdef\\rot{\\mathop{\\mathrm{rot}}} \\gdef\\perm#1#2{\\^#1\\\\! P_#2} \\gdef\\sgn{\\mathop{\\mathrm{sgn}}} $$ 通用 量的表記 符號 含義 自定義宏 $\\boldsymbol{a}$ 向量 $\\vec{\\boldsymbol{b}}$ 行向量 $x$, $y$ \u0026hellip; 實變量 $z$, $s$ \u0026hellip; 複變量 $n$ 離散變量 $t$ 時間變量 $f()$ 實單值函數 $F()$ 複變函數 $\\boldsymbol{f}()$ 向量值函數 $\\boldsymbol{A}()$ 場函數 $x_n$ 序列 $\\theta$ 角度，與$z$軸夾角 $\\varphi$ 相角，輻角，功角，與$x$軸夾角 $\\varOmega$ 立體角 $C$, $C_1$, $C_2$ \u0026hellip; 常量 $\\uv\\imath$, $\\uv\\jmath$, $\\uv{r}$ \u0026hellip; 單位向量 \\uv{} $\\boldsymbol{e}_1$, $\\boldsymbol{e}_2$ \u0026hellip; 基 $\\boldsymbol{M}$ 矩陣 $\\delta(t)$ 單位衝激函數 $u(t)$ 單位階躍函數 $\\sgn$ 符號函數 \\sgn $\\varPhi$ 通量 常數 符號 含義 自定義宏 $\\imi$, $\\imj$ 虛數單位 \\imi \\imj $\\elr$ 自然底數 \\elr $\\pi$ 圓周率 $\\varepsilon_0$ 真空電容率 $\\mu_0$ 真空電導率 $c$ 真空光速 算子或算符 符號 含義 自定義宏 $\\dif$ 微分 \\dif $x\u0026rsquo;$, $\\dot{x}$, $\\dfrac{\\dif x}{\\dif t}$ 導數 $\\int$ 積分，積分器 $\\Ft$ Fourier 變換 \\Ft $\\Lt$ Laplace 變換 \\Lt $\\cdot$, $\u0026lt;\\ \u0026gt;$ 内積 $\\times$ 外積 $\\ast$ 捲積 $\\Im$ 虛部 $\\Re$ 實部 $\\nabla$, $\\grad$ 梯度 \\grad $\\nabla\\cdot$, $\\dive$ 散度 \\dive $\\nabla\\times$, $\\rot$ 旋度 \\rot $\\perm{n}{r}$ $n$中選$r$的排列數 $n \\choose r$ $n$中選$r$的組合數 $\\det$ 方陣的行列式 $^\\mathrm{T}$ 轉置 常用過程量 符號 含義 自定義宏 $\\dif t$ 時間微分 $\\dif\\ell$ 綫元 $\\dif\\boldsymbol\\ell$ 有向綫元 $\\dif{S}$ 面元 $\\dif\\boldsymbol{S}$ 有向面元 $\\dif V$ 體元 $\\dif\\varOmega$ 立體角元 集合與空間 集合 含義 $\\R$ 實數 $\\mathbb{C}$ 複數 $\\N$ 自然數 $\\R^n$ $n$ 維歐幾里得空間 單位與量綱 單位 含義 自定義宏 $\\Ohm$ 歐姆 \\Ohm $\\Hz$ 赫茲 \\Hz $\\dB$ 分貝 \\dB $\\Volt$ 伏特 \\Volt $\\Amp$ 安培 \\Amp $\\Wat$ 瓦特 \\Wat $\\Var$ 乏 \\Var $\\Col$ 庫倫 \\Col $\\Far$ 法拉 \\Far $\\degree$ 角度 $\\micro$ $10^{-6}$ \\micro $\\milli$ $10^{-3}$ \\milli $\\kilo$ $10^3$ \\kilo 科別 電磁學 符號 含義 例 $[\\ ]$, $\\dim$ 量綱 $[F] = N = \\mathrm{kg\\cdot m\\cdot s^{-2}}$ $\\rho$ 體密度 $\\sigma$ 面密度 $\\lambda$ 綫密度 電路理論 符號 含義 例 $\\parallel$ 并聯 $\\dot{Z_1}\\parallel\\dot{Z_2} = \\dfrac{\\dot{Z_1}\\dot{Z_2}}{\\dot{Z_1}+\\dot{Z_2}}$ $A\\phase{\\varphi}$ 相量 $\\dot{I}\\coloneqq I\\elr^{\\imj\\varphi_i} = I \\phase{\\varphi_i}$ 無機化學與分析化學 符號 含義 例 $[\\ ]$ 濃度 $K_\\text{a} = \\dfrac{\\ce{[H+][X-]}}{\\ce{[HX]}}$ $\\ominus$ 標準狀態 $\\Delta_\\mathrm{r} G_\\mathrm{m}^\\ominus$ ","date":"2021-06-09T04:35:29+08:00","permalink":"https://ming.ling.moe/posts/symbol-def/","title":"符號定義"},{"content":"題目 令\n$$ A = \\begin{bmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\end{bmatrix} $$\n證明當 $n \\geq 4$ 時 $A^n = O$\n$\\forall n \\geq 4$ $$ \\begin{array}{rlll} A^n = A^4 A^{n-4} \u0026amp;= \u0026amp;\\begin{bmatrix} 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\end{bmatrix} ^ 4 \u0026amp;A^{n-4}\\\\ \u0026amp;= \u0026amp;\\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\end{bmatrix} ^ 2 \u0026amp;A^{n-4}\\\\ \u0026amp;= \u0026amp;\\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\end{bmatrix} \u0026amp;A^{n-4} \\\\ \u0026amp;= \u0026amp;O \\end{array} $$ 關聯內容 若 $A=(a_{ij})$ 爲一個 $m \\times n$ 的矩陣，且 $B=(b_{ij})$ 爲一個 $n \\times r$ 的矩陣，則乘積 $AB = C = (c_{ij})$ 爲一個 $m \\times r$ 的矩陣，它的元素定義爲 $$ c_{ij} = \\boldsymbol a_i \\boldsymbol b_j = \\sum_{k=1}^n a_{ik}b_{kj} $$ 下述法則對任何標量 $\\alpha$ 和 $\\beta$ 及矩陣 $A, B$ 和 $C$ 都是成立的. $A + B = B + A$ $(A+B) + C = A + (B+C)$ $(AB)C = A(BC)$ $A(B+C) = AB + AC$ $(A+B)C = AC + BC$ $(\\alpha\\beta)A = \\alpha(\\beta A)$ $\\alpha(AB) = (\\alpha A)B = A(\\alpha B)$ $(\\alpha + \\beta)A = \\alpha A + \\beta A$ $\\alpha (A + B) = \\alpha A + \\alpha B$ ","date":"2020-07-09T09:53:26+08:00","permalink":"https://ming.ling.moe/posts/ma-la-5/","title":"Ma LA 5"},{"content":"證明行等價矩陣的性質：\nⅠ. $A$ 與 $B$ 是行等價的，則 $B$ 與 $A$ 是行等價的.\nⅡ. $A$ 與 $B$ 是行等價的，且 $B$ 與 $C$ 是行等價的， 則 $A$ 與 $C$ 是行等價的.\n1. 因为 $A$ 與 $B$ 行等價，故 $$ B = E_kE_{k-1} \\cdots E_1 A $$ 因此有 $$ \\begin{aligned} (E_kE_{k-1} \\cdots E_1)^{-1}\u0026amp;B =\u0026amp; (E_kE_{k-1} \\cdots E_1)^{-1}E_kE_{k-1} \\cdots E_1 \u0026amp;A \\\\ E_{1}^{-1}E_{2}^{-1} \\cdots E_{k}^{-1}\u0026amp;B =\u0026amp; \u0026amp;A \\\\ \u0026amp;B =\u0026amp; E_kE_{k-1} \\cdots E_1 \u0026amp;A \\end{aligned} $$\n因此 $A = E_{1}^{-1}E_{2}^{-1} \\cdots E_{k}^{-1}B$，而 $E^{-1}$ 是 $E$ 同類型的初等矩陣.\n2. $$B = E_kE_{k-1} \\cdots E_1A \\tag{1}$$ $$C = F_jF_{j-1} \\cdots F_1B \\tag{2}$$ $(1)$ 式代入 $(2)$ 式 $$C = F_jF_{j-1} \\cdots F_1E_kE_{k-1} \\cdots E_1A $$ $A$ 經歷有限 ($k+j$) 次行運算得到 $C$，$A$ 與 $C$ 等價. 關聯內容 若 $E$ 爲一初等矩陣，則 $E$ 是非奇異的，且 $E^{-1}$ 爲一與其同類型的初等矩陣 ","date":"2020-07-08T16:47:15+08:00","permalink":"https://ming.ling.moe/posts/ma-la-4/","title":"Ma LA 4"},{"content":"題目 設 $A$ 是 $2 \\times 2$ 的矩陣，其中 $a_{11} \\neq 0$，設 $\\alpha = a_{21}/a_{11}$. 證明 $A$ 可分解爲積的形式 $$ \\begin{aligned} \\begin{bmatrix} 1 \u0026amp; 0 \\\\ \\alpha \u0026amp; 1 \\end{bmatrix} \\begin{bmatrix} a_{11} \u0026amp; a_{12} \\\\ 0 \u0026amp; b \\end{bmatrix} \\end{aligned} $$ 並求 $b$ .\n直接對 $A = \\begin{bmatrix} a_{11} \u0026amp; a_{12} \\\\ a_{21} \u0026amp; a_{22} \\end{bmatrix}$ 因式分解十分困難，因此先計算\n$$ \\begin{aligned} \\begin{bmatrix} 1 \u0026amp; 0 \\\\ \\alpha \u0026amp; 1 \\end{bmatrix} \\begin{bmatrix} a_{11} \u0026amp; a_{12} \\\\ 0 \u0026amp; b \\end{bmatrix} = \\begin{bmatrix} a_{11} \u0026amp; a_{12} \\\\ a_{11}\\alpha \u0026amp; a_{12}\\alpha+b \\end{bmatrix} \\end{aligned} $$\n若令 $a_{21} = a_{11}\\alpha$ , $a_{22} = a_{12}\\alpha+b$\n則有\n$$ \\begin{aligned} \\begin{bmatrix} 1 \u0026amp; 0 \\\\ \\alpha \u0026amp; 1 \\end{bmatrix} \\begin{bmatrix} a_{11} \u0026amp; a_{12} \\\\ 0 \u0026amp; b \\end{bmatrix} = \\begin{bmatrix} a_{11} \u0026amp; a_{12} \\\\ a_{21} \u0026amp; a_{22} \\end{bmatrix} = A \\end{aligned} $$\n又因題設條件 $\\alpha = a_{21}/a_{11}$， 所以 $A$ 可以分解爲題中給出的形式，同時可求出 $b = a_{22} - \\dfrac{a_{12}a_{21}}{a_{11}}$ .\n","date":"2020-07-08T15:59:18+08:00","permalink":"https://ming.ling.moe/posts/ma-la-3/","title":"Ma LA 3"},{"content":"題目 設 $A\\boldsymbol x = \\boldsymbol b$ 是增廣矩陣具有最簡形\n$$ \\begin{bmatrix} \\begin{array}{rrrrr|r} 1 \u0026amp; 2 \u0026amp; 0 \u0026amp; 3 \u0026amp; 1 \u0026amp; -2 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 2 \u0026amp; 4 \u0026amp; 5 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\end{array} \\end{bmatrix} $$\n的線性方程組.\n(a) 求出方程組的所有解.\n(‌b) 如果 $\\boldsymbol a_1 = \\begin{bmatrix} 1\\\\ 1\\\\ 3\\\\ 4 \\end{bmatrix}$, $\\boldsymbol a_3 = \\begin{bmatrix}\\begin{array}{r} 2\\\\ -1\\\\ 1\\\\ 3 \\end{array}\\end{bmatrix}$, 確定 $\\boldsymbol b$.\n解 (a) 依最簡形構造方程組如下\n$$ \\begin{aligned} \u0026amp;\\begin{cases} \\begin{aligned} x_1 + 2x_2 \u0026amp;\u0026amp; \u0026amp;+ 3x_4 + x_5 = 0 \\\\ \u0026amp;\u0026amp; x_3 \u0026amp;+ 2x_4 + x_5 = 0 \\end{aligned} \\end{cases} \\\\\\\\ \\Rightarrow \\qquad \u0026amp;\\begin{cases} \\begin{alignedat}{5} x_1 \u0026amp;= -x_2 \u0026amp;-3\u0026amp;x_4\u0026amp; \u0026amp;-\u0026amp;x_5\u0026amp; -2 \\\\ x_3 \u0026amp;= \u0026amp;-2\u0026amp;x_4\u0026amp; \u0026amp;-4\u0026amp;x_5\u0026amp; +5 \\end{alignedat} \\end{cases} \\end{aligned} $$\n不妨設自由變量 $x_2, x_4, x_5$ 分別爲 $r, s, t$ . 因此 $\\boldsymbol x = \\begin{bmatrix} -2r-3s-t-2\\\\ r\\\\ -2s-4t+5\\\\ s\\\\ t \\end{bmatrix}$\n(b) 設該方程爲形如\n$$ \\boldsymbol a_1x_1 + \\boldsymbol a_2x_2 + \\boldsymbol a_3x_3 + \\boldsymbol a_4x_4 + \\boldsymbol a_5x_5 = \\boldsymbol b \\tag{1} $$\n(1) 式代入\n$$ \\boldsymbol a_1 = \\begin{bmatrix} 1\\\\ 1\\\\ 3\\\\ 4 \\end{bmatrix} \\quad \\boldsymbol a_3 = \\begin{bmatrix}\\begin{array}{r} 2\\\\ -1\\\\ 1\\\\ 3 \\end{array}\\end{bmatrix} $$\n得\n$$ \\begin{bmatrix} 1\\\\ 1\\\\ 3\\\\ 4 \\end{bmatrix}x_1 + \\boldsymbol a_2x_2 + \\begin{bmatrix}\\begin{array}{r} 2\\\\ -1\\\\ 1\\\\ 3 \\end{array}\\end{bmatrix}x_3 + \\boldsymbol a_4x_4 + \\boldsymbol a_5x_5 = \\boldsymbol b \\tag{2} $$\n觀察 (2) 式，可使用特殊值法解題，令自由變量 $r = s = t = 0$ , 可得到解集中的一組解:\n$$ \\boldsymbol x = \\begin{bmatrix}\\begin{array}{r} -2\\\\ 0\\\\ 5\\\\ 0\\\\ 0 \\end{array}\\end{bmatrix} $$\n將這個解代入 (2) 式，則 $x_2, x_4, x_5$ 三項都被消去，大大節省了運算量. 可得\n$$ \\boldsymbol b = -2\\begin{bmatrix}\\begin{array}{r} 1\\\\ 1\\\\ 3\\\\ 4 \\end{array}\\end{bmatrix} + 5\\begin{bmatrix}\\begin{array}{r} 2\\\\ -1\\\\ 1\\\\ 3 \\end{array}\\end{bmatrix} = \\begin{bmatrix}\\begin{array}{r} -2\\\\ -2\\\\ -6\\\\ -8 \\end{array}\\end{bmatrix} + \\begin{bmatrix}\\begin{array}{r} 10\\\\ -5\\\\ 5\\\\ 15 \\end{array}\\end{bmatrix} = \\begin{bmatrix}\\begin{array}{r} 8\\\\ -7\\\\ -1\\\\ 7 \\end{array}\\end{bmatrix} $$\n關聯內容 如不採用特殊值法，可以直接將解集代入矩陣方程 (2) 中，自由變量 $r, s, t$ 最終都會被消去而得到相同的答案. 但如此一來，最後的步驟就是解一個自變量爲 $\\boldsymbol a_2, \\boldsymbol a_4, \\boldsymbol a_5, \\boldsymbol b$ 的 4 元 4 次線性方程組，顯然取特殊值 0 的方法在計算上簡單的多.\n","date":"2020-07-07T00:00:00Z","permalink":"https://ming.ling.moe/posts/ma-la-2/","title":"Ma LA 2"},{"content":"題目 用高斯-若爾當消元法解方程組 :\n$$ \\begin{alignedat}{4} -\u0026amp;x_1 +\u0026amp;x_2 -\u0026amp;\u0026amp;x_3 +\u0026amp;3\u0026amp;x_4 = 0 \\\\ 3\u0026amp;x_1 +\u0026amp;x_2 -\u0026amp;\u0026amp;x_3 -\u0026amp;\u0026amp;x_4 = 0 \\\\ 2\u0026amp;x_1 -\u0026amp;x_2 -\u0026amp;2\u0026amp;x_3 -\u0026amp;\u0026amp;x_4 = 0 \\end{alignedat} $$\n解 構造方程組的增廣矩陣 (augmented matrix) 如下\n$$ \\begin{bmatrix} \\begin{array}{rrrr|r} -1 \u0026amp; 1 \u0026amp; -1 \u0026amp; 3 \u0026amp; 0 \\\\ 3 \u0026amp; 1 \u0026amp; -1 \u0026amp; -1 \u0026amp; 0 \\\\ 2 \u0026amp; -1 \u0026amp; -2 \u0026amp; -1 \u0026amp; 0 \\end{array} \\end{bmatrix} $$\n使用初等行運算 III, 以首行 $ (\\begin{array}{rrrr|r} -1 \u0026amp; 1 \u0026amp; -1 \u0026amp; 3 \u0026amp; 0 \\end{array}) $ 爲主行 (pivotal row) , 主行分別乘以 3 和 2 後分別加在第 2 和第 3 行上，以置 0 第二和第三行的首非 0 元.\n$$ \\begin{bmatrix} \\begin{array}{rrrr|r} -1 \u0026amp; 1 \u0026amp; -1 \u0026amp; 3 \u0026amp; 0 \\\\ 0 \u0026amp; 4 \u0026amp; -4 \u0026amp; 8 \u0026amp; 0 \\\\ 0 \u0026amp; 1 \u0026amp; -4 \u0026amp; 5 \u0026amp; 0 \\end{array} \\end{bmatrix} $$\n再以次行作爲主行，以相同的方法置 0 第 3 行的首非 0 元.\n$$ \\begin{bmatrix} \\begin{array}{rrrr|r} -1 \u0026amp; 1 \u0026amp; -1 \u0026amp; 3 \u0026amp; 0 \\\\ 0 \u0026amp; 4 \u0026amp; -4 \u0026amp; 8 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; -3 \u0026amp; 3 \u0026amp; 0 \\end{array} \\end{bmatrix} $$\n使用初等行運算 II, 零各行首變量歸一, 得到行階梯形:\n$$ \\begin{bmatrix} \\begin{array}{rrrr|r} 1 \u0026amp; -1 \u0026amp; 1 \u0026amp; -3 \u0026amp; 0 \\\\ 0 \u0026amp; 1 \u0026amp; -1 \u0026amp; 2 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; -1 \u0026amp; 0 \\end{array} \\end{bmatrix} $$\n第 3 行乘 1 加至第 2 行, 得\n$$ \\begin{bmatrix} \\begin{array}{rrrr|r} 1 \u0026amp; -1 \u0026amp; 1 \u0026amp; -3 \u0026amp; 0 \\\\ 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; -1 \u0026amp; 0 \\end{array} \\end{bmatrix} $$\n第 3 行乘 -1 加至第 1 行, 並第二行乘 1 加至第一行得行最簡形如下:\n$$ \\begin{bmatrix} \\begin{array}{rrrr|r} 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; -1 \u0026amp; 0 \\\\ 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; -1 \u0026amp; 0 \\end{array} \\end{bmatrix} $$\n顯然的, $x_4$ 爲自由變量 (free variable)，方程組的解集爲\n$$ \\begin{array}{rrr} x_1 \u0026amp;= \u0026amp;x_4 \\\\ x_2 \u0026amp;= \u0026amp;-x_4 \\\\ x_3 \u0026amp;= \u0026amp;x_4 \\end{array} $$\n不妨設 $x_4=r$ ,則有任意滿足 $\\boldsymbol x = (x_1,x_2,x_3,x_4) = (r, -r ,r ,r)$ 形式的 4 元組均是方程組的解. 如 $(1,-1,1,1)$ 就是方程組的一個解.\n關聯內容 初等行運算\nⅠ. 交換兩行 Ⅱ. 以非零實數乘以某行 Ⅲ. 將某行替換爲它與其他行倍數的和\n利用行運算 I、II 和 III 將線性方程組的增廣矩陣化爲行階梯形的過程稱爲高斯消元法(Gauss elimination). 利用基本行運算將矩陣化爲行最簡形的過程稱爲高斯-若爾當消元法(Gauss-Jordan elimination). 若一個矩陣滿足 每一非零行中的首非零元爲 1. 第 $k$ 行的元不全爲 0 時，第 $k+1$ 行首非零元前零的數量多於第 $k$ 行首非零元前零的數量. 所有元素均爲零的行必在不全爲零的行之後. 則稱其爲行階梯形矩陣(row echelon form).\n若一個矩陣滿足 矩陣是行階梯形的. 每行的首非零元是該列唯一的非零元. 則稱該矩陣爲行最簡形(reduced row echelon form).\n也請參見：小學之上，線代之下\n","date":"2020-07-06T00:00:00Z","permalink":"https://ming.ling.moe/posts/ma-la-1/","title":"Ma LA 1"},{"content":"$m$ 和 $n$ $m \\times n$ 線性方程組中，共有 $n$ 個變量，$m$ 條線性方程\n感性的來看，方程組中的每一條方程都是一種「約束」，在所有方程的共同約束下，變量的取值範圍（解集）被確定下來，每一條方程的「約束」都是將變量的解集縮小. 舉例來看，設獨立變量 $x$ 與 $y$ 均爲實數，設一個方程組，假設開始時方程組內沒有任何方程. 這時 $(x, y)$ 的解集就是整個 $\\mathbb{R}^2$，幾何上看就是整個 $xOy$ 平面.\n現在，給方程組內加入一條方程 $$2x + y = 1 \\tag{1}$$ 這時顯然有許多點不能出現在解集中了，比如座標原點 $(0, 0)$，因爲 $2 \\times 0 + 0 \\neq 1$，幾何上看，就是原點不在 $(1)$ 式確定的直線上. 這時，可以這麼感性的理解解集上發生的變化：因爲 $(1)$ 式的加入，解集不能再「肆無忌憚」的想取什麼就取什麼了，解集中的解必須同時「服從」所有方程規定的「條件」. 換句話說解集從原來的整個平面被方程 $(1)$「約束」成了一條直線.\n這時讓我們加入第二條方程 $$3x + y = 0 \\tag{2}$$ 這時，連原來的一條直線上的點都取不到了，解集中僅僅剩下 $(-1, 3)$ 了，顯然地，兩個方程顯然比一個方程的條件更加「嚴苛」，解集不止要「服從」$(1)$ 式還要「服從」$(2)$ 式，而能同時服從這兩個條件的點，就只剩下 $(-1, 3)$ 了.\n如果我們再加入一個方程會怎麼樣？, 假設其爲 $$2x - 2y = 4 \\tag{3}$$ 這時，連解集中僅剩的一個點 $(-1 ,3)$ 也不能滿足新加入的這個方程的約束了. 這時，解集爲 $\\varnothing$，方程組就沒有解了.\n相容性 因而可知，在上述的例子中，當方程組中若\na. 沒有方程或僅有 $(1)$ 式： 解集爲無限集\nb. 有 $(1)$ 和 $(2)$ 式：解集爲有限集\nc. 有 $(1)$, $(2)$ 和 $(3)$ 式： 解集爲 $\\varnothing$\n我們稱當解集爲 $\\varnothing$ 時方程組是不相容的 (inconsistent)，解集非空時方程組是相容的 (consistent)，\n脫去集合論的外衣，當解集爲\n無限集 $\\implies$ 方程組有無窮多解\n有限集 $\\implies$ 方程組有有限個解. (對於線性方程組有唯一解)\n$\\varnothing$ $\\implies$ 方程組無解\n因此有結論：相容的線性方程組解集必非空.\n亞定與超定 當方程的個數多於未知數的個數 ($m \u0026gt; n$)，則稱方程組是超定的(overdetermined)\n當方程的個數少於未知數的個數 ($m \u0026lt; n$)，則稱方程組是亞定的(underdetermined)\n還拿前例舉例： 情況a中 $m \u0026lt; n$，方程組亞定， 情況c中 $m \u0026gt; n$，方程組超定.\n字面理解，亞定，就是線性方程組的「約束」不足，超定，就是「約束」過多，從而造成方程組可能無窮多解或無解這兩種極端情況.\n但是超定並不意味不相容(雖然現實中通常都不相容)，還是上面的例子，如果所加入的式 $(3)$ 改成 $2x - 2y = -8$ 的話，就會驚喜的發現，加入前解集中唯一的解 $(-1 ,3)$ 依然滿足新加入的方程，則方程組雖然同樣是超定的，但是相容的. 現實中這種概率實在太低了，因此超定往往不相容.\n同樣的，亞定也不意味相容. 如上述例子中當方程組中沒有方程時，加入的方程改爲 $0x + 0y = 1$，則 $(x, y)$ 取遍 $\\mathbb{R}^2$ 域中的所有點，都將無法滿足之，解集爲空而方程組不相容. 但是，只要亞定的方程組相容，其一定有無窮多解. 因爲在解相容的亞定方程的過程中，總能將 $n - m$ 個變量先視爲不需要解的參量(或稱自由變量)，把他們當作常數寫在等號右邊，最後的解在形式上總是包含這些自由變量. 這時，每個自由變量都可以在定義域 $\\mathbb{R}$ 中任意取值，則 $m$ 個解出來的變量的值也跟隨着變化，可以視爲 $m$ 個多元線性函數，其值域也是 $\\mathbb{R}$，因而有無窮多解.\n","date":"2020-06-05T23:38:04+08:00","image":"https://ming.ling.moe/posts/consistency-of-linear-systeme/cover_hu6a30b78d1b97b36ad9e386e78c589302_2928633_120x120_fill_q75_box_smart1.jpg","permalink":"https://ming.ling.moe/posts/consistency-of-linear-systeme/","title":"小學之上，線代之下"}]